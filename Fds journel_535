{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN1PAN2Fwgb5+SpejLpxDQI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ankitap0/MSC-535/blob/main/Fds%20journel_535\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**pratical** 1"
      ],
      "metadata": {
        "id": "_ucGTF6IZCKB"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "L6r7P9Vfpweg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "my_dict={'Name':[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],\n",
        "        'age':[20,27,35,45,55,43,35],\n",
        "        'designation':[\"VP\",\"CEO\",\"CFO\",\"VP\",\"VP\",\"CEO\",\"MD\"]}\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "df=pd.DataFrame(my_dict)\n",
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "RQ2fZg31gqxS",
        "outputId": "dd2df641-076c-434c-a207-6e32dd5f936a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Name  age designation\n",
              "0    a   20          VP\n",
              "1    b   27         CEO\n",
              "2    c   35         CFO\n",
              "3    d   45          VP\n",
              "4    e   55          VP\n",
              "5    f   43         CEO\n",
              "6    g   35          MD"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5cbbb7b4-a893-4845-9611-56491de55c3e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>age</th>\n",
              "      <th>designation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "      <td>20</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>27</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>35</td>\n",
              "      <td>CFO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>d</td>\n",
              "      <td>45</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>e</td>\n",
              "      <td>55</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>f</td>\n",
              "      <td>43</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>g</td>\n",
              "      <td>35</td>\n",
              "      <td>MD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5cbbb7b4-a893-4845-9611-56491de55c3e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5cbbb7b4-a893-4845-9611-56491de55c3e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5cbbb7b4-a893-4845-9611-56491de55c3e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Vc1xUgYeppYZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv('Csv example')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "cJpDDZyIg2Rw",
        "outputId": "3da391b6-8bfd-48ba-c664-c7316aa70008"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Name  age designation\n",
              "0    a   20          VP\n",
              "1    b   27         CEO\n",
              "2    c   35         CFO\n",
              "3    d   45          VP\n",
              "4    e   55          VP\n",
              "5    f   43         CEO\n",
              "6    g   35          MD"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66159d98-228d-4efa-b227-3e2b613cd20a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>age</th>\n",
              "      <th>designation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "      <td>20</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>27</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>35</td>\n",
              "      <td>CFO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>d</td>\n",
              "      <td>45</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>e</td>\n",
              "      <td>55</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>f</td>\n",
              "      <td>43</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>g</td>\n",
              "      <td>35</td>\n",
              "      <td>MD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66159d98-228d-4efa-b227-3e2b613cd20a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-66159d98-228d-4efa-b227-3e2b613cd20a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-66159d98-228d-4efa-b227-3e2b613cd20a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_csv=pd.read_csv('Csv example')\n",
        "df_csv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "_vgCli0Tg8Zf",
        "outputId": "e23b9451-7909-431d-fbc3-cd0d603921fa"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0 Name  age designation\n",
              "0           0    a   20          VP\n",
              "1           1    b   27         CEO\n",
              "2           2    c   35         CFO\n",
              "3           3    d   45          VP\n",
              "4           4    e   55          VP\n",
              "5           5    f   43         CEO\n",
              "6           6    g   35          MD"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc00a924-72f8-424b-ac7c-dc406e36f4ba\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Name</th>\n",
              "      <th>age</th>\n",
              "      <th>designation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>a</td>\n",
              "      <td>20</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>b</td>\n",
              "      <td>27</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>c</td>\n",
              "      <td>35</td>\n",
              "      <td>CFO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>d</td>\n",
              "      <td>45</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>e</td>\n",
              "      <td>55</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>f</td>\n",
              "      <td>43</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>g</td>\n",
              "      <td>35</td>\n",
              "      <td>MD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc00a924-72f8-424b-ac7c-dc406e36f4ba')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bc00a924-72f8-424b-ac7c-dc406e36f4ba button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bc00a924-72f8-424b-ac7c-dc406e36f4ba');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv('CSV Ex',index=False)\n",
        "df_csv=pd.read_csv('CSV Ex')\n",
        "df_csv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "grHA92hphB8x",
        "outputId": "40c1f982-db94-4f9f-c45d-3f0942b87927"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Name  age designation\n",
              "0    a   20          VP\n",
              "1    b   27         CEO\n",
              "2    c   35         CFO\n",
              "3    d   45          VP\n",
              "4    e   55          VP\n",
              "5    f   43         CEO\n",
              "6    g   35          MD"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-469fea48-a662-442f-aa93-5d2f4bdab134\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>age</th>\n",
              "      <th>designation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "      <td>20</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>27</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>35</td>\n",
              "      <td>CFO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>d</td>\n",
              "      <td>45</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>e</td>\n",
              "      <td>55</td>\n",
              "      <td>VP</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>f</td>\n",
              "      <td>43</td>\n",
              "      <td>CEO</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>g</td>\n",
              "      <td>35</td>\n",
              "      <td>MD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-469fea48-a662-442f-aa93-5d2f4bdab134')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-469fea48-a662-442f-aa93-5d2f4bdab134 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-469fea48-a662-442f-aa93-5d2f4bdab134');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "Location = \"student-mat.csv\"\n",
        "df = pd.read_csv(Location, header=None)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "VUeZTGXghIZ4",
        "outputId": "1ec1aca8-c050-4a83-b425-5a17d2c0df82"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0    1    2        3        4        5     6     7        8         9   \\\n",
              "0  school  sex  age  address  famsize  Pstatus  Medu  Fedu     Mjob      Fjob   \n",
              "1      GP    F   18        U      GT3        A     4     4  at_home   teacher   \n",
              "2      GP    F   17        U      GT3        T     1     1  at_home     other   \n",
              "3      GP    F   15        U      LE3        T     1     1  at_home     other   \n",
              "4      GP    F   15        U      GT3        T     4     2   health  services   \n",
              "\n",
              "   ...      23        24     25    26    27      28        29  30  31  32  \n",
              "0  ...  famrel  freetime  goout  Dalc  Walc  health  absences  G1  G2  G3  \n",
              "1  ...       4         3      4     1     1       3         6   5   6   6  \n",
              "2  ...       5         3      3     1     1       3         4   5   5   6  \n",
              "3  ...       4         3      2     2     3       3        10   7   8  10  \n",
              "4  ...       3         2      2     1     1       5         2  15  14  15  \n",
              "\n",
              "[5 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ae9329a-7057-48ca-aaf9-7ec6a802c5c6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>23</th>\n",
              "      <th>24</th>\n",
              "      <th>25</th>\n",
              "      <th>26</th>\n",
              "      <th>27</th>\n",
              "      <th>28</th>\n",
              "      <th>29</th>\n",
              "      <th>30</th>\n",
              "      <th>31</th>\n",
              "      <th>32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>school</td>\n",
              "      <td>sex</td>\n",
              "      <td>age</td>\n",
              "      <td>address</td>\n",
              "      <td>famsize</td>\n",
              "      <td>Pstatus</td>\n",
              "      <td>Medu</td>\n",
              "      <td>Fedu</td>\n",
              "      <td>Mjob</td>\n",
              "      <td>Fjob</td>\n",
              "      <td>...</td>\n",
              "      <td>famrel</td>\n",
              "      <td>freetime</td>\n",
              "      <td>goout</td>\n",
              "      <td>Dalc</td>\n",
              "      <td>Walc</td>\n",
              "      <td>health</td>\n",
              "      <td>absences</td>\n",
              "      <td>G1</td>\n",
              "      <td>G2</td>\n",
              "      <td>G3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>18</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>A</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>at_home</td>\n",
              "      <td>teacher</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>17</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>15</td>\n",
              "      <td>U</td>\n",
              "      <td>LE3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>15</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>health</td>\n",
              "      <td>services</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>15</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 33 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ae9329a-7057-48ca-aaf9-7ec6a802c5c6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3ae9329a-7057-48ca-aaf9-7ec6a802c5c6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3ae9329a-7057-48ca-aaf9-7ec6a802c5c6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "Location = \"student-mat.csv\"\n",
        "df = pd.read_csv(Location)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "4yKx5Q2vhYNX",
        "outputId": "879d44f4-1f17-4f69-9dd6-7c2160097cc4"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n",
              "0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n",
              "1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n",
              "2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n",
              "3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n",
              "4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n",
              "\n",
              "  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
              "0      4        3      4     1     1      3        6   5   6   6  \n",
              "1      5        3      3     1     1      3        4   5   5   6  \n",
              "2      4        3      2     2     3      3       10   7   8  10  \n",
              "3      3        2      2     1     1      5        2  15  14  15  \n",
              "4      4        3      2     1     2      5        4   6  10  10  \n",
              "\n",
              "[5 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b8be84c-7df2-4551-88fa-67133a44e57e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>school</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>address</th>\n",
              "      <th>famsize</th>\n",
              "      <th>Pstatus</th>\n",
              "      <th>Medu</th>\n",
              "      <th>Fedu</th>\n",
              "      <th>Mjob</th>\n",
              "      <th>Fjob</th>\n",
              "      <th>...</th>\n",
              "      <th>famrel</th>\n",
              "      <th>freetime</th>\n",
              "      <th>goout</th>\n",
              "      <th>Dalc</th>\n",
              "      <th>Walc</th>\n",
              "      <th>health</th>\n",
              "      <th>absences</th>\n",
              "      <th>G1</th>\n",
              "      <th>G2</th>\n",
              "      <th>G3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>18</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>A</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>at_home</td>\n",
              "      <td>teacher</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>17</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>15</td>\n",
              "      <td>U</td>\n",
              "      <td>LE3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>15</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>health</td>\n",
              "      <td>services</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>15</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>16</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>other</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 33 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b8be84c-7df2-4551-88fa-67133a44e57e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0b8be84c-7df2-4551-88fa-67133a44e57e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0b8be84c-7df2-4551-88fa-67133a44e57e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "Location = \"student-mat.csv\"\n",
        "# To add headers as we load the data...\n",
        "df = pd.read_csv(Location, names=['RollNo','Names','Grades'])\n",
        "# To add headers to a dataframe\n",
        "df.columns = ['RollNo','Names','Grades']\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "HxY6ah08hrKC",
        "outputId": "0eff1cab-204e-42f9-a64a-8cd1a8d2408b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                                                                                                                                                                                                  RollNo  \\\n",
              "school sex age address famsize Pstatus Medu Fedu Mjob    Fjob     reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences     G1   \n",
              "GP     F   18  U       GT3     A       4    4    at_home teacher  course mother   2          2         0        yes       no     no   no         yes     yes    no       no       4      3        4     1    1    3      6             5   \n",
              "           17  U       GT3     T       1    1    at_home other    course father   1          2         0        no        yes    no   no         no      yes    yes      no       5      3        3     1    1    3      4             5   \n",
              "           15  U       LE3     T       1    1    at_home other    other  mother   1          2         3        yes       no     yes  no         yes     yes    yes      no       4      3        2     2    3    3      10            7   \n",
              "                       GT3     T       4    2    health  services home   mother   1          3         0        no        yes    yes  yes        yes     yes    yes      yes      3      2        2     1    1    5      2            15   \n",
              "\n",
              "                                                                                                                                                                                                                                  Names  \\\n",
              "school sex age address famsize Pstatus Medu Fedu Mjob    Fjob     reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences    G2   \n",
              "GP     F   18  U       GT3     A       4    4    at_home teacher  course mother   2          2         0        yes       no     no   no         yes     yes    no       no       4      3        4     1    1    3      6            6   \n",
              "           17  U       GT3     T       1    1    at_home other    course father   1          2         0        no        yes    no   no         no      yes    yes      no       5      3        3     1    1    3      4            5   \n",
              "           15  U       LE3     T       1    1    at_home other    other  mother   1          2         3        yes       no     yes  no         yes     yes    yes      no       4      3        2     2    3    3      10           8   \n",
              "                       GT3     T       4    2    health  services home   mother   1          3         0        no        yes    yes  yes        yes     yes    yes      yes      3      2        2     1    1    5      2           14   \n",
              "\n",
              "                                                                                                                                                                                                                                  Grades  \n",
              "school sex age address famsize Pstatus Medu Fedu Mjob    Fjob     reason guardian traveltime studytime failures schoolsup famsup paid activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences     G3  \n",
              "GP     F   18  U       GT3     A       4    4    at_home teacher  course mother   2          2         0        yes       no     no   no         yes     yes    no       no       4      3        4     1    1    3      6             6  \n",
              "           17  U       GT3     T       1    1    at_home other    course father   1          2         0        no        yes    no   no         no      yes    yes      no       5      3        3     1    1    3      4             6  \n",
              "           15  U       LE3     T       1    1    at_home other    other  mother   1          2         3        yes       no     yes  no         yes     yes    yes      no       4      3        2     2    3    3      10           10  \n",
              "                       GT3     T       4    2    health  services home   mother   1          3         0        no        yes    yes  yes        yes     yes    yes      yes      3      2        2     1    1    5      2            15  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1234cf46-4755-4d8a-9adc-780c6a627a90\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>RollNo</th>\n",
              "      <th>Names</th>\n",
              "      <th>Grades</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>school</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>address</th>\n",
              "      <th>famsize</th>\n",
              "      <th>Pstatus</th>\n",
              "      <th>Medu</th>\n",
              "      <th>Fedu</th>\n",
              "      <th>Mjob</th>\n",
              "      <th>Fjob</th>\n",
              "      <th>reason</th>\n",
              "      <th>guardian</th>\n",
              "      <th>traveltime</th>\n",
              "      <th>studytime</th>\n",
              "      <th>failures</th>\n",
              "      <th>schoolsup</th>\n",
              "      <th>famsup</th>\n",
              "      <th>paid</th>\n",
              "      <th>activities</th>\n",
              "      <th>nursery</th>\n",
              "      <th>higher</th>\n",
              "      <th>internet</th>\n",
              "      <th>romantic</th>\n",
              "      <th>famrel</th>\n",
              "      <th>freetime</th>\n",
              "      <th>goout</th>\n",
              "      <th>Dalc</th>\n",
              "      <th>Walc</th>\n",
              "      <th>health</th>\n",
              "      <th>absences</th>\n",
              "      <td>G1</td>\n",
              "      <td>G2</td>\n",
              "      <td>G3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">GP</th>\n",
              "      <th rowspan=\"4\" valign=\"top\">F</th>\n",
              "      <th>18</th>\n",
              "      <th>U</th>\n",
              "      <th>GT3</th>\n",
              "      <th>A</th>\n",
              "      <th>4</th>\n",
              "      <th>4</th>\n",
              "      <th>at_home</th>\n",
              "      <th>teacher</th>\n",
              "      <th>course</th>\n",
              "      <th>mother</th>\n",
              "      <th>2</th>\n",
              "      <th>2</th>\n",
              "      <th>0</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>no</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>no</th>\n",
              "      <th>4</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>3</th>\n",
              "      <th>6</th>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <th>U</th>\n",
              "      <th>GT3</th>\n",
              "      <th>T</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>at_home</th>\n",
              "      <th>other</th>\n",
              "      <th>course</th>\n",
              "      <th>father</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>0</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>no</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>5</th>\n",
              "      <th>3</th>\n",
              "      <th>3</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">15</th>\n",
              "      <th rowspan=\"2\" valign=\"top\">U</th>\n",
              "      <th>LE3</th>\n",
              "      <th>T</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>at_home</th>\n",
              "      <th>other</th>\n",
              "      <th>other</th>\n",
              "      <th>mother</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>no</th>\n",
              "      <th>4</th>\n",
              "      <th>3</th>\n",
              "      <th>2</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>3</th>\n",
              "      <th>10</th>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GT3</th>\n",
              "      <th>T</th>\n",
              "      <th>4</th>\n",
              "      <th>2</th>\n",
              "      <th>health</th>\n",
              "      <th>services</th>\n",
              "      <th>home</th>\n",
              "      <th>mother</th>\n",
              "      <th>1</th>\n",
              "      <th>3</th>\n",
              "      <th>0</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>yes</th>\n",
              "      <th>3</th>\n",
              "      <th>2</th>\n",
              "      <th>2</th>\n",
              "      <th>1</th>\n",
              "      <th>1</th>\n",
              "      <th>5</th>\n",
              "      <th>2</th>\n",
              "      <td>15</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1234cf46-4755-4d8a-9adc-780c6a627a90')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1234cf46-4755-4d8a-9adc-780c6a627a90 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1234cf46-4755-4d8a-9adc-780c6a627a90');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "names = ['Bob','Jessica','Mary','John','Mel']\n",
        "grades = [76,95,77,78,99]\n",
        "bsdegrees = [1,1,0,0,1]\n",
        "msdegrees = [2,1,0,0,0]\n",
        "phddegrees = [0,1,0,0,0]\n",
        "Degrees = zip(names,grades,bsdegrees,msdegrees,phddegrees)\n",
        "columns = ['Names','Grades','BS','MS','PhD']\n",
        "df = pd.DataFrame(data = Degrees, columns=columns)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "BJh_-zMGh55e",
        "outputId": "88152324-af04-4349-9d8e-6412adcbde47"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Names  Grades  BS  MS  PhD\n",
              "0      Bob      76   1   2    0\n",
              "1  Jessica      95   1   1    1\n",
              "2     Mary      77   0   0    0\n",
              "3     John      78   0   0    0\n",
              "4      Mel      99   1   0    0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8a14a15-98e6-4a97-aabe-b91733b00036\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Names</th>\n",
              "      <th>Grades</th>\n",
              "      <th>BS</th>\n",
              "      <th>MS</th>\n",
              "      <th>PhD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Bob</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Jessica</td>\n",
              "      <td>95</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mary</td>\n",
              "      <td>77</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>John</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Mel</td>\n",
              "      <td>99</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8a14a15-98e6-4a97-aabe-b91733b00036')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e8a14a15-98e6-4a97-aabe-b91733b00036 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e8a14a15-98e6-4a97-aabe-b91733b00036');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install xlrd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XruzvO72kGiP",
        "outputId": "bbbcb75e-f59a-4a89-afa1-50e93dd06c6f"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: xlrd in /usr/local/lib/python3.7/dist-packages (1.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install xlwt openpyxl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eJNaRbxRkRLB",
        "outputId": "b4d4e643-1b28-482a-8477-15dcc0dfdc29"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: xlwt in /usr/local/lib/python3.7/dist-packages (1.3.0)\n",
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.7/dist-packages (3.0.10)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.7/dist-packages (from openpyxl) (1.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " pip install xlsxwriter\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BJLBZoA6kaCU",
        "outputId": "c215a7a4-ee37-4986-964f-2c7b94d6f7ef"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting xlsxwriter\n",
            "  Downloading XlsxWriter-3.0.3-py3-none-any.whl (149 kB)\n",
            "\u001b[K     |████████████████████████████████| 149 kB 4.6 MB/s \n",
            "\u001b[?25hInstalling collected packages: xlsxwriter\n",
            "Successfully installed xlsxwriter-3.0.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "con = sqlite3.connect(\"portal_mammals.sqlite\")\n",
        "cur = con.cursor()\n",
        "\n",
        "\n",
        "for row in cur.execute('SELECT * FROM species;'):\n",
        "    print(row)\n",
        "    \n",
        "con.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0BsEmboCkx8f",
        "outputId": "aa33ad7b-132e-46a6-8b20-7a03d5838f0f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('AB', 'Amphispiza', 'bilineata', 'Bird')\n",
            "('AH', 'Ammospermophilus', 'harrisi', 'Rodent')\n",
            "('AS', 'Ammodramus', 'savannarum', 'Bird')\n",
            "('BA', 'Baiomys', 'taylori', 'Rodent')\n",
            "('CB', 'Campylorhynchus', 'brunneicapillus', 'Bird')\n",
            "('CM', 'Calamospiza', 'melanocorys', 'Bird')\n",
            "('CQ', 'Callipepla', 'squamata', 'Bird')\n",
            "('CS', 'Crotalus', 'scutalatus', 'Reptile')\n",
            "('CT', 'Cnemidophorus', 'tigris', 'Reptile')\n",
            "('CU', 'Cnemidophorus', 'uniparens', 'Reptile')\n",
            "('CV', 'Crotalus', 'viridis', 'Reptile')\n",
            "('DM', 'Dipodomys', 'merriami', 'Rodent')\n",
            "('DO', 'Dipodomys', 'ordii', 'Rodent')\n",
            "('DS', 'Dipodomys', 'spectabilis', 'Rodent')\n",
            "('DX', 'Dipodomys', 'sp.', 'Rodent')\n",
            "('EO', 'Eumeces', 'obsoletus', 'Reptile')\n",
            "('GS', 'Gambelia', 'silus', 'Reptile')\n",
            "('NL', 'Neotoma', 'albigula', 'Rodent')\n",
            "('NX', 'Neotoma', 'sp.', 'Rodent')\n",
            "('OL', 'Onychomys', 'leucogaster', 'Rodent')\n",
            "('OT', 'Onychomys', 'torridus', 'Rodent')\n",
            "('OX', 'Onychomys', 'sp.', 'Rodent')\n",
            "('PB', 'Chaetodipus', 'baileyi', 'Rodent')\n",
            "('PC', 'Pipilo', 'chlorurus', 'Bird')\n",
            "('PE', 'Peromyscus', 'eremicus', 'Rodent')\n",
            "('PF', 'Perognathus', 'flavus', 'Rodent')\n",
            "('PG', 'Pooecetes', 'gramineus', 'Bird')\n",
            "('PH', 'Perognathus', 'hispidus', 'Rodent')\n",
            "('PI', 'Chaetodipus', 'intermedius', 'Rodent')\n",
            "('PL', 'Peromyscus', 'leucopus', 'Rodent')\n",
            "('PM', 'Peromyscus', 'maniculatus', 'Rodent')\n",
            "('PP', 'Chaetodipus', 'penicillatus', 'Rodent')\n",
            "('PU', 'Pipilo', 'fuscus', 'Bird')\n",
            "('PX', 'Chaetodipus', 'sp.', 'Rodent')\n",
            "('RF', 'Reithrodontomys', 'fulvescens', 'Rodent')\n",
            "('RM', 'Reithrodontomys', 'megalotis', 'Rodent')\n",
            "('RO', 'Reithrodontomys', 'montanus', 'Rodent')\n",
            "('RX', 'Reithrodontomys', 'sp.', 'Rodent')\n",
            "('SA', 'Sylvilagus', 'audubonii', 'Rabbit')\n",
            "('SB', 'Spizella', 'breweri', 'Bird')\n",
            "('SC', 'Sceloporus', 'clarki', 'Reptile')\n",
            "('SF', 'Sigmodon', 'fulviventer', 'Rodent')\n",
            "('SH', 'Sigmodon', 'hispidus', 'Rodent')\n",
            "('SO', 'Sigmodon', 'ochrognathus', 'Rodent')\n",
            "('SS', 'Spermophilus', 'spilosoma', 'Rodent')\n",
            "('ST', 'Spermophilus', 'tereticaudus', 'Rodent')\n",
            "('SU', 'Sceloporus', 'undulatus', 'Reptile')\n",
            "('SX', 'Sigmodon', 'sp.', 'Rodent')\n",
            "('UL', 'Lizard', 'sp.', 'Reptile')\n",
            "('UP', 'Pipilo', 'sp.', 'Bird')\n",
            "('UR', 'Rodent', 'sp.', 'Rodent')\n",
            "('US', 'Sparrow', 'sp.', 'Bird')\n",
            "('ZL', 'Zonotrichia', 'leucophrys', 'Bird')\n",
            "('ZM', 'Zenaida', 'macroura', 'Bird')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "\n",
        "# Create a SQL connection to our SQLite database\n",
        "con = sqlite3.connect(\"portal_mammals.sqlite\")\n",
        "\n",
        "cur = con.cursor()\n",
        "\n",
        "# Return all results of query\n",
        "cur.execute('SELECT plot_id FROM plots WHERE plot_type=\"Control\"')\n",
        "print(cur.fetchall())\n",
        "\n",
        "# Return first result of query\n",
        "cur.execute('SELECT species FROM species WHERE taxa=\"Bird\"')\n",
        "print(cur.fetchone())\n",
        "\n",
        "# Be sure to close the connection\n",
        "con.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B-eci03ok7pO",
        "outputId": "00f081c5-9887-4c27-9d71-87b8249fa0db"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(2,), (4,), (8,), (11,), (12,), (14,), (17,), (22,)]\n",
            "('bilineata',)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import sqlite3\n",
        "\n",
        "# Read sqlite query results into a pandas DataFrame\n",
        "con = sqlite3.connect(\"portal_mammals.sqlite\")\n",
        "df = pd.read_sql_query(\"SELECT * from surveys\", con)\n",
        "\n",
        "# Verify that result of SQL query is stored in the dataframe\n",
        "print(df.head())\n",
        "\n",
        "con.close()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qYveOThOlGJQ",
        "outputId": "e8fee486-c18c-4eeb-dd78-174eaed9277e"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   record_id  month  day  year  plot_id species_id sex  hindfoot_length  \\\n",
            "0          1      7   16  1977        2         NL   M             32.0   \n",
            "1          2      7   16  1977        3         NL   M             33.0   \n",
            "2          3      7   16  1977        2         DM   F             37.0   \n",
            "3          4      7   16  1977        7         DM   M             36.0   \n",
            "4          5      7   16  1977        3         DM   M             35.0   \n",
            "\n",
            "   weight  \n",
            "0     NaN  \n",
            "1     NaN  \n",
            "2     NaN  \n",
            "3     NaN  \n",
            "4     NaN  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas import DataFrame\n",
        "Cars={'Brand':['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'],\n",
        "      'Price':[22000,25000,27000,35000]\n",
        "      }\n",
        "df=DataFrame(Cars,columns=['Brand','Price'])\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bP5NGR2ElOgh",
        "outputId": "0de12051-79f1-4625-9a49-f94776fef802"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Brand  Price\n",
            "0     Honda Civic  22000\n",
            "1  Toyota Corolla  25000\n",
            "2      Ford Focus  27000\n",
            "3         Audi A4  35000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlite3\n",
        "conn=sqlite3.connect('TestDB1.db')\n",
        "c=conn.cursor()"
      ],
      "metadata": {
        "id": "PMUhlh6XlUfJ"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "c.execute('CREATE TABLE CARS2(Brand text, Price number)')\n",
        "conn.commit()"
      ],
      "metadata": {
        "id": "HiNh6knVlZGW"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_sql('CARS2',conn,if_exists='replace',index=False)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "YsKLfbQFldAW",
        "outputId": "f1696847-7086-4746-90c7-ae0aade63d9a"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Brand  Price\n",
              "0     Honda Civic  22000\n",
              "1  Toyota Corolla  25000\n",
              "2      Ford Focus  27000\n",
              "3         Audi A4  35000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84a97044-4d92-45e7-aff5-23b66c081395\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Honda Civic</td>\n",
              "      <td>22000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Toyota Corolla</td>\n",
              "      <td>25000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ford Focus</td>\n",
              "      <td>27000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Audi A4</td>\n",
              "      <td>35000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84a97044-4d92-45e7-aff5-23b66c081395')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-84a97044-4d92-45e7-aff5-23b66c081395 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-84a97044-4d92-45e7-aff5-23b66c081395');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c.execute('''\n",
        "SELECT Brand,max(Price) from CARS2\n",
        "''')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7kjr4fmXlucH",
        "outputId": "29e98351-1483-4fcb-aab8-ed82130ba72d"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlite3.Cursor at 0x7ffa7ef36f80>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=DataFrame(c.fetchall(),columns=['Brand','Price'])\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "_2IL_H84l05_",
        "outputId": "01e48400-eb2c-4e9d-e5cf-89bef5af0ac6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Brand, Price]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3bdbc30-51a2-4156-848a-493ff50b4207\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3bdbc30-51a2-4156-848a-493ff50b4207')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f3bdbc30-51a2-4156-848a-493ff50b4207 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f3bdbc30-51a2-4156-848a-493ff50b4207');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd \n",
        "import os\n",
        "import sqlite3 as lite\n",
        "from sqlalchemy import create_engine"
      ],
      "metadata": {
        "id": "fKpX2ilqmBmZ"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "studentId=[\"rj101\",\"rj150\",\"rj134\",\"rj70\"]\n",
        "SName=[\"Saurabh\",\"Giftson\",\"Vikas\",\"Radha\"]\n",
        "LName=[\"Chavan\",\"Paul\",\"Bisoi\",\"Rai\"]\n",
        "Department=[\"Bms\",\"Bcom\",\"BscCS\",\"BScIT\"]\n",
        "Email=[\"100rabh@gmail.com\",\"gift01@gmail.com\",\"vik21@gmail.com\",\"rad01@gmail.com\"]"
      ],
      "metadata": {
        "id": "5i71FeIXmK-Z"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "studata = zip(studentId,SName,LName,Department,Email)"
      ],
      "metadata": {
        "id": "jIcROkOvmP7W"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(data =studata, columns=['StudentId','SName','LName','Department','Email'])\n",
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "BuLBJKpLmXE2",
        "outputId": "0678dc94-a9b6-4f37-ba76-fa6dcdb7e497"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  StudentId    SName   LName Department              Email\n",
              "0     rj101  Saurabh  Chavan        Bms  100rabh@gmail.com\n",
              "1     rj150  Giftson    Paul       Bcom   gift01@gmail.com\n",
              "2     rj134    Vikas   Bisoi      BscCS    vik21@gmail.com\n",
              "3      rj70    Radha     Rai      BScIT    rad01@gmail.com"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-be482f80-7855-43c1-a2b3-2545e8549101\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>StudentId</th>\n",
              "      <th>SName</th>\n",
              "      <th>LName</th>\n",
              "      <th>Department</th>\n",
              "      <th>Email</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>rj101</td>\n",
              "      <td>Saurabh</td>\n",
              "      <td>Chavan</td>\n",
              "      <td>Bms</td>\n",
              "      <td>100rabh@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>rj150</td>\n",
              "      <td>Giftson</td>\n",
              "      <td>Paul</td>\n",
              "      <td>Bcom</td>\n",
              "      <td>gift01@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>rj134</td>\n",
              "      <td>Vikas</td>\n",
              "      <td>Bisoi</td>\n",
              "      <td>BscCS</td>\n",
              "      <td>vik21@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>rj70</td>\n",
              "      <td>Radha</td>\n",
              "      <td>Rai</td>\n",
              "      <td>BScIT</td>\n",
              "      <td>rad01@gmail.com</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be482f80-7855-43c1-a2b3-2545e8549101')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-be482f80-7855-43c1-a2b3-2545e8549101 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-be482f80-7855-43c1-a2b3-2545e8549101');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1=df.to_csv('studentdata.csv',index=False,header=True)\n",
        "df1"
      ],
      "metadata": {
        "id": "liefbB1zmbkq"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2=df.to_excel('studentdata2.xlsx',index=False,header=True)"
      ],
      "metadata": {
        "id": "6D7w-1MamhZb"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2"
      ],
      "metadata": {
        "id": "99msJAtfmmnU"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "db_filename = r'studentdata.db'\n",
        "con = lite.connect(db_filename)\n",
        "df.to_sql('student',\n",
        "con,\n",
        "schema=None,\n",
        "if_exists='replace',\n",
        "index=True,\n",
        "index_label=None,\n",
        "chunksize=None,\n",
        "dtype=None)\n",
        "con.close()\n",
        "\n",
        "db_file = r'studentdata.db'\n",
        "engine = create_engine(r\"sqlite:///{}\" .format(db_file))\n",
        "sql = 'SELECT * from student '\n",
        "\n",
        "\n",
        "studf = pd.read_sql(sql, engine)\n",
        "studf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "vVyOut9RmqTg",
        "outputId": "183bc48a-191f-4e33-b9b8-c4ffcc19f8cf"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index StudentId    SName   LName Department              Email\n",
              "0      0     rj101  Saurabh  Chavan        Bms  100rabh@gmail.com\n",
              "1      1     rj150  Giftson    Paul       Bcom   gift01@gmail.com\n",
              "2      2     rj134    Vikas   Bisoi      BscCS    vik21@gmail.com\n",
              "3      3      rj70    Radha     Rai      BScIT    rad01@gmail.com"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88b14509-26f6-4ce4-9158-5445543bd09a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>StudentId</th>\n",
              "      <th>SName</th>\n",
              "      <th>LName</th>\n",
              "      <th>Department</th>\n",
              "      <th>Email</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>rj101</td>\n",
              "      <td>Saurabh</td>\n",
              "      <td>Chavan</td>\n",
              "      <td>Bms</td>\n",
              "      <td>100rabh@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>rj150</td>\n",
              "      <td>Giftson</td>\n",
              "      <td>Paul</td>\n",
              "      <td>Bcom</td>\n",
              "      <td>gift01@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>rj134</td>\n",
              "      <td>Vikas</td>\n",
              "      <td>Bisoi</td>\n",
              "      <td>BscCS</td>\n",
              "      <td>vik21@gmail.com</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>rj70</td>\n",
              "      <td>Radha</td>\n",
              "      <td>Rai</td>\n",
              "      <td>BScIT</td>\n",
              "      <td>rad01@gmail.com</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88b14509-26f6-4ce4-9158-5445543bd09a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-88b14509-26f6-4ce4-9158-5445543bd09a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-88b14509-26f6-4ce4-9158-5445543bd09a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "cf8DHixcmyDU"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "state=pd.read_csv(\"US_violent_crime.csv\")\n",
        "state.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1wal0lKRm3SA",
        "outputId": "80d7828b-e6e8-468c-8c99-a5b09bfe6aaf"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        State  Murder  Assault  UrbanPop  Rape\n",
              "0     Alabama    13.2      236        58  21.2\n",
              "1      Alaska    10.0      263        48  44.5\n",
              "2     Arizona     8.1      294        80  31.0\n",
              "3    Arkansas     8.8      190        50  19.5\n",
              "4  California     9.0      276        91  40.6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4396f3ef-b120-4010-8155-985bf2d50779\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Murder</th>\n",
              "      <th>Assault</th>\n",
              "      <th>UrbanPop</th>\n",
              "      <th>Rape</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>13.2</td>\n",
              "      <td>236</td>\n",
              "      <td>58</td>\n",
              "      <td>21.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alaska</td>\n",
              "      <td>10.0</td>\n",
              "      <td>263</td>\n",
              "      <td>48</td>\n",
              "      <td>44.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>8.1</td>\n",
              "      <td>294</td>\n",
              "      <td>80</td>\n",
              "      <td>31.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arkansas</td>\n",
              "      <td>8.8</td>\n",
              "      <td>190</td>\n",
              "      <td>50</td>\n",
              "      <td>19.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>California</td>\n",
              "      <td>9.0</td>\n",
              "      <td>276</td>\n",
              "      <td>91</td>\n",
              "      <td>40.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4396f3ef-b120-4010-8155-985bf2d50779')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4396f3ef-b120-4010-8155-985bf2d50779 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4396f3ef-b120-4010-8155-985bf2d50779');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def some_func(x):\n",
        "  return x*2\n",
        "state.apply(some_func) #update each entry of dataframe without any loop\n",
        "state.apply(lambda n: n*2) #lambda also works the same"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "sRmz477Rm-sa",
        "outputId": "002527f4-d088-4838-9eda-7b92ca9c7764"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           State  Murder  Assault  UrbanPop  Rape\n",
              "0                 AlabamaAlabama    26.4      472       116  42.4\n",
              "1                   AlaskaAlaska    20.0      526        96  89.0\n",
              "2                 ArizonaArizona    16.2      588       160  62.0\n",
              "3               ArkansasArkansas    17.6      380       100  39.0\n",
              "4           CaliforniaCalifornia    18.0      552       182  81.2\n",
              "5               ColoradoColorado    15.8      408       156  77.4\n",
              "6         ConnecticutConnecticut     6.6      220       154  22.2\n",
              "7               DelawareDelaware    11.8      476       144  31.6\n",
              "8                 FloridaFlorida    30.8      670       160  63.8\n",
              "9                 GeorgiaGeorgia    34.8      422       120  51.6\n",
              "10                  HawaiiHawaii    10.6       92       166  40.4\n",
              "11                    IdahoIdaho     5.2      240       108  28.4\n",
              "12              IllinoisIllinois    20.8      498       166  48.0\n",
              "13                IndianaIndiana    14.4      226       130  42.0\n",
              "14                      IowaIowa     4.4      112       114  22.6\n",
              "15                  KansasKansas    12.0      230       132  36.0\n",
              "16              KentuckyKentucky    19.4      218       104  32.6\n",
              "17            LouisianaLouisiana    30.8      498       132  44.4\n",
              "18                    MaineMaine     4.2      166       102  15.6\n",
              "19              MarylandMaryland    22.6      600       134  55.6\n",
              "20    MassachusettsMassachusetts     8.8      298       170  32.6\n",
              "21              MichiganMichigan    24.2      510       148  70.2\n",
              "22            MinnesotaMinnesota     5.4      144       132  29.8\n",
              "23        MississippiMississippi    32.2      518        88  34.2\n",
              "24              MissouriMissouri    18.0      356       140  56.4\n",
              "25                MontanaMontana    12.0      218       106  32.8\n",
              "26              NebraskaNebraska     8.6      204       124  33.0\n",
              "27                  NevadaNevada    24.4      504       162  92.0\n",
              "28    New HampshireNew Hampshire     4.2      114       112  19.0\n",
              "29          New JerseyNew Jersey    14.8      318       178  37.6\n",
              "30          New MexicoNew Mexico    22.8      570       140  64.2\n",
              "31              New YorkNew York    22.2      508       172  52.2\n",
              "32  North CarolinaNorth Carolina    26.0      674        90  32.2\n",
              "33      North DakotaNorth Dakota     1.6       90        88  14.6\n",
              "34                      OhioOhio    14.6      240       150  42.8\n",
              "35              OklahomaOklahoma    13.2      302       136  40.0\n",
              "36                  OregonOregon     9.8      318       134  58.6\n",
              "37      PennsylvaniaPennsylvania    12.6      212       144  29.8\n",
              "38      Rhode IslandRhode Island     6.8      348       174  16.6\n",
              "39  South CarolinaSouth Carolina    28.8      558        96  45.0\n",
              "40      South DakotaSouth Dakota     7.6      172        90  25.6\n",
              "41            TennesseeTennessee    26.4      376       118  53.8\n",
              "42                    TexasTexas    25.4      402       160  51.0\n",
              "43                      UtahUtah     6.4      240       160  45.8\n",
              "44                VermontVermont     4.4       96        64  22.4\n",
              "45              VirginiaVirginia    17.0      312       126  41.4\n",
              "46          WashingtonWashington     8.0      290       146  52.4\n",
              "47    West VirginiaWest Virginia    11.4      162        78  18.6\n",
              "48            WisconsinWisconsin     5.2      106       132  21.6\n",
              "49                WyomingWyoming    13.6      322       120  31.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9762bedc-5ebc-44a8-a6b9-aaa040a75139\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Murder</th>\n",
              "      <th>Assault</th>\n",
              "      <th>UrbanPop</th>\n",
              "      <th>Rape</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AlabamaAlabama</td>\n",
              "      <td>26.4</td>\n",
              "      <td>472</td>\n",
              "      <td>116</td>\n",
              "      <td>42.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AlaskaAlaska</td>\n",
              "      <td>20.0</td>\n",
              "      <td>526</td>\n",
              "      <td>96</td>\n",
              "      <td>89.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ArizonaArizona</td>\n",
              "      <td>16.2</td>\n",
              "      <td>588</td>\n",
              "      <td>160</td>\n",
              "      <td>62.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ArkansasArkansas</td>\n",
              "      <td>17.6</td>\n",
              "      <td>380</td>\n",
              "      <td>100</td>\n",
              "      <td>39.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CaliforniaCalifornia</td>\n",
              "      <td>18.0</td>\n",
              "      <td>552</td>\n",
              "      <td>182</td>\n",
              "      <td>81.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>ColoradoColorado</td>\n",
              "      <td>15.8</td>\n",
              "      <td>408</td>\n",
              "      <td>156</td>\n",
              "      <td>77.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>ConnecticutConnecticut</td>\n",
              "      <td>6.6</td>\n",
              "      <td>220</td>\n",
              "      <td>154</td>\n",
              "      <td>22.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>DelawareDelaware</td>\n",
              "      <td>11.8</td>\n",
              "      <td>476</td>\n",
              "      <td>144</td>\n",
              "      <td>31.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>FloridaFlorida</td>\n",
              "      <td>30.8</td>\n",
              "      <td>670</td>\n",
              "      <td>160</td>\n",
              "      <td>63.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>GeorgiaGeorgia</td>\n",
              "      <td>34.8</td>\n",
              "      <td>422</td>\n",
              "      <td>120</td>\n",
              "      <td>51.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>HawaiiHawaii</td>\n",
              "      <td>10.6</td>\n",
              "      <td>92</td>\n",
              "      <td>166</td>\n",
              "      <td>40.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>IdahoIdaho</td>\n",
              "      <td>5.2</td>\n",
              "      <td>240</td>\n",
              "      <td>108</td>\n",
              "      <td>28.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>IllinoisIllinois</td>\n",
              "      <td>20.8</td>\n",
              "      <td>498</td>\n",
              "      <td>166</td>\n",
              "      <td>48.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>IndianaIndiana</td>\n",
              "      <td>14.4</td>\n",
              "      <td>226</td>\n",
              "      <td>130</td>\n",
              "      <td>42.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>IowaIowa</td>\n",
              "      <td>4.4</td>\n",
              "      <td>112</td>\n",
              "      <td>114</td>\n",
              "      <td>22.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>KansasKansas</td>\n",
              "      <td>12.0</td>\n",
              "      <td>230</td>\n",
              "      <td>132</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>KentuckyKentucky</td>\n",
              "      <td>19.4</td>\n",
              "      <td>218</td>\n",
              "      <td>104</td>\n",
              "      <td>32.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>LouisianaLouisiana</td>\n",
              "      <td>30.8</td>\n",
              "      <td>498</td>\n",
              "      <td>132</td>\n",
              "      <td>44.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>MaineMaine</td>\n",
              "      <td>4.2</td>\n",
              "      <td>166</td>\n",
              "      <td>102</td>\n",
              "      <td>15.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>MarylandMaryland</td>\n",
              "      <td>22.6</td>\n",
              "      <td>600</td>\n",
              "      <td>134</td>\n",
              "      <td>55.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>MassachusettsMassachusetts</td>\n",
              "      <td>8.8</td>\n",
              "      <td>298</td>\n",
              "      <td>170</td>\n",
              "      <td>32.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>MichiganMichigan</td>\n",
              "      <td>24.2</td>\n",
              "      <td>510</td>\n",
              "      <td>148</td>\n",
              "      <td>70.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>MinnesotaMinnesota</td>\n",
              "      <td>5.4</td>\n",
              "      <td>144</td>\n",
              "      <td>132</td>\n",
              "      <td>29.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>MississippiMississippi</td>\n",
              "      <td>32.2</td>\n",
              "      <td>518</td>\n",
              "      <td>88</td>\n",
              "      <td>34.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>MissouriMissouri</td>\n",
              "      <td>18.0</td>\n",
              "      <td>356</td>\n",
              "      <td>140</td>\n",
              "      <td>56.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>MontanaMontana</td>\n",
              "      <td>12.0</td>\n",
              "      <td>218</td>\n",
              "      <td>106</td>\n",
              "      <td>32.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>NebraskaNebraska</td>\n",
              "      <td>8.6</td>\n",
              "      <td>204</td>\n",
              "      <td>124</td>\n",
              "      <td>33.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>NevadaNevada</td>\n",
              "      <td>24.4</td>\n",
              "      <td>504</td>\n",
              "      <td>162</td>\n",
              "      <td>92.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>New HampshireNew Hampshire</td>\n",
              "      <td>4.2</td>\n",
              "      <td>114</td>\n",
              "      <td>112</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>New JerseyNew Jersey</td>\n",
              "      <td>14.8</td>\n",
              "      <td>318</td>\n",
              "      <td>178</td>\n",
              "      <td>37.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>New MexicoNew Mexico</td>\n",
              "      <td>22.8</td>\n",
              "      <td>570</td>\n",
              "      <td>140</td>\n",
              "      <td>64.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>New YorkNew York</td>\n",
              "      <td>22.2</td>\n",
              "      <td>508</td>\n",
              "      <td>172</td>\n",
              "      <td>52.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>North CarolinaNorth Carolina</td>\n",
              "      <td>26.0</td>\n",
              "      <td>674</td>\n",
              "      <td>90</td>\n",
              "      <td>32.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>North DakotaNorth Dakota</td>\n",
              "      <td>1.6</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "      <td>14.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>OhioOhio</td>\n",
              "      <td>14.6</td>\n",
              "      <td>240</td>\n",
              "      <td>150</td>\n",
              "      <td>42.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>OklahomaOklahoma</td>\n",
              "      <td>13.2</td>\n",
              "      <td>302</td>\n",
              "      <td>136</td>\n",
              "      <td>40.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>OregonOregon</td>\n",
              "      <td>9.8</td>\n",
              "      <td>318</td>\n",
              "      <td>134</td>\n",
              "      <td>58.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>PennsylvaniaPennsylvania</td>\n",
              "      <td>12.6</td>\n",
              "      <td>212</td>\n",
              "      <td>144</td>\n",
              "      <td>29.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Rhode IslandRhode Island</td>\n",
              "      <td>6.8</td>\n",
              "      <td>348</td>\n",
              "      <td>174</td>\n",
              "      <td>16.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>South CarolinaSouth Carolina</td>\n",
              "      <td>28.8</td>\n",
              "      <td>558</td>\n",
              "      <td>96</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>South DakotaSouth Dakota</td>\n",
              "      <td>7.6</td>\n",
              "      <td>172</td>\n",
              "      <td>90</td>\n",
              "      <td>25.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>TennesseeTennessee</td>\n",
              "      <td>26.4</td>\n",
              "      <td>376</td>\n",
              "      <td>118</td>\n",
              "      <td>53.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>TexasTexas</td>\n",
              "      <td>25.4</td>\n",
              "      <td>402</td>\n",
              "      <td>160</td>\n",
              "      <td>51.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>UtahUtah</td>\n",
              "      <td>6.4</td>\n",
              "      <td>240</td>\n",
              "      <td>160</td>\n",
              "      <td>45.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>VermontVermont</td>\n",
              "      <td>4.4</td>\n",
              "      <td>96</td>\n",
              "      <td>64</td>\n",
              "      <td>22.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>VirginiaVirginia</td>\n",
              "      <td>17.0</td>\n",
              "      <td>312</td>\n",
              "      <td>126</td>\n",
              "      <td>41.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>WashingtonWashington</td>\n",
              "      <td>8.0</td>\n",
              "      <td>290</td>\n",
              "      <td>146</td>\n",
              "      <td>52.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>West VirginiaWest Virginia</td>\n",
              "      <td>11.4</td>\n",
              "      <td>162</td>\n",
              "      <td>78</td>\n",
              "      <td>18.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>WisconsinWisconsin</td>\n",
              "      <td>5.2</td>\n",
              "      <td>106</td>\n",
              "      <td>132</td>\n",
              "      <td>21.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>WyomingWyoming</td>\n",
              "      <td>13.6</td>\n",
              "      <td>322</td>\n",
              "      <td>120</td>\n",
              "      <td>31.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9762bedc-5ebc-44a8-a6b9-aaa040a75139')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9762bedc-5ebc-44a8-a6b9-aaa040a75139 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9762bedc-5ebc-44a8-a6b9-aaa040a75139');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "state.transform(func = lambda x : x * 10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wTfwsgnEnHu8",
        "outputId": "1ac00296-3aaa-4fcd-e913-c50139a0ce03"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                State  Murder  Assault  \\\n",
              "0   AlabamaAlabamaAlabamaAlabamaAlabamaAlabamaAlab...   132.0     2360   \n",
              "1   AlaskaAlaskaAlaskaAlaskaAlaskaAlaskaAlaskaAlas...   100.0     2630   \n",
              "2   ArizonaArizonaArizonaArizonaArizonaArizonaAriz...    81.0     2940   \n",
              "3   ArkansasArkansasArkansasArkansasArkansasArkans...    88.0     1900   \n",
              "4   CaliforniaCaliforniaCaliforniaCaliforniaCalifo...    90.0     2760   \n",
              "5   ColoradoColoradoColoradoColoradoColoradoColora...    79.0     2040   \n",
              "6   ConnecticutConnecticutConnecticutConnecticutCo...    33.0     1100   \n",
              "7   DelawareDelawareDelawareDelawareDelawareDelawa...    59.0     2380   \n",
              "8   FloridaFloridaFloridaFloridaFloridaFloridaFlor...   154.0     3350   \n",
              "9   GeorgiaGeorgiaGeorgiaGeorgiaGeorgiaGeorgiaGeor...   174.0     2110   \n",
              "10  HawaiiHawaiiHawaiiHawaiiHawaiiHawaiiHawaiiHawa...    53.0      460   \n",
              "11  IdahoIdahoIdahoIdahoIdahoIdahoIdahoIdahoIdahoI...    26.0     1200   \n",
              "12  IllinoisIllinoisIllinoisIllinoisIllinoisIllino...   104.0     2490   \n",
              "13  IndianaIndianaIndianaIndianaIndianaIndianaIndi...    72.0     1130   \n",
              "14           IowaIowaIowaIowaIowaIowaIowaIowaIowaIowa    22.0      560   \n",
              "15  KansasKansasKansasKansasKansasKansasKansasKans...    60.0     1150   \n",
              "16  KentuckyKentuckyKentuckyKentuckyKentuckyKentuc...    97.0     1090   \n",
              "17  LouisianaLouisianaLouisianaLouisianaLouisianaL...   154.0     2490   \n",
              "18  MaineMaineMaineMaineMaineMaineMaineMaineMaineM...    21.0      830   \n",
              "19  MarylandMarylandMarylandMarylandMarylandMaryla...   113.0     3000   \n",
              "20  MassachusettsMassachusettsMassachusettsMassach...    44.0     1490   \n",
              "21  MichiganMichiganMichiganMichiganMichiganMichig...   121.0     2550   \n",
              "22  MinnesotaMinnesotaMinnesotaMinnesotaMinnesotaM...    27.0      720   \n",
              "23  MississippiMississippiMississippiMississippiMi...   161.0     2590   \n",
              "24  MissouriMissouriMissouriMissouriMissouriMissou...    90.0     1780   \n",
              "25  MontanaMontanaMontanaMontanaMontanaMontanaMont...    60.0     1090   \n",
              "26  NebraskaNebraskaNebraskaNebraskaNebraskaNebras...    43.0     1020   \n",
              "27  NevadaNevadaNevadaNevadaNevadaNevadaNevadaNeva...   122.0     2520   \n",
              "28  New HampshireNew HampshireNew HampshireNew Ham...    21.0      570   \n",
              "29  New JerseyNew JerseyNew JerseyNew JerseyNew Je...    74.0     1590   \n",
              "30  New MexicoNew MexicoNew MexicoNew MexicoNew Me...   114.0     2850   \n",
              "31  New YorkNew YorkNew YorkNew YorkNew YorkNew Yo...   111.0     2540   \n",
              "32  North CarolinaNorth CarolinaNorth CarolinaNort...   130.0     3370   \n",
              "33  North DakotaNorth DakotaNorth DakotaNorth Dako...     8.0      450   \n",
              "34           OhioOhioOhioOhioOhioOhioOhioOhioOhioOhio    73.0     1200   \n",
              "35  OklahomaOklahomaOklahomaOklahomaOklahomaOklaho...    66.0     1510   \n",
              "36  OregonOregonOregonOregonOregonOregonOregonOreg...    49.0     1590   \n",
              "37  PennsylvaniaPennsylvaniaPennsylvaniaPennsylvan...    63.0     1060   \n",
              "38  Rhode IslandRhode IslandRhode IslandRhode Isla...    34.0     1740   \n",
              "39  South CarolinaSouth CarolinaSouth CarolinaSout...   144.0     2790   \n",
              "40  South DakotaSouth DakotaSouth DakotaSouth Dako...    38.0      860   \n",
              "41  TennesseeTennesseeTennesseeTennesseeTennesseeT...   132.0     1880   \n",
              "42  TexasTexasTexasTexasTexasTexasTexasTexasTexasT...   127.0     2010   \n",
              "43           UtahUtahUtahUtahUtahUtahUtahUtahUtahUtah    32.0     1200   \n",
              "44  VermontVermontVermontVermontVermontVermontVerm...    22.0      480   \n",
              "45  VirginiaVirginiaVirginiaVirginiaVirginiaVirgin...    85.0     1560   \n",
              "46  WashingtonWashingtonWashingtonWashingtonWashin...    40.0     1450   \n",
              "47  West VirginiaWest VirginiaWest VirginiaWest Vi...    57.0      810   \n",
              "48  WisconsinWisconsinWisconsinWisconsinWisconsinW...    26.0      530   \n",
              "49  WyomingWyomingWyomingWyomingWyomingWyomingWyom...    68.0     1610   \n",
              "\n",
              "    UrbanPop   Rape  \n",
              "0        580  212.0  \n",
              "1        480  445.0  \n",
              "2        800  310.0  \n",
              "3        500  195.0  \n",
              "4        910  406.0  \n",
              "5        780  387.0  \n",
              "6        770  111.0  \n",
              "7        720  158.0  \n",
              "8        800  319.0  \n",
              "9        600  258.0  \n",
              "10       830  202.0  \n",
              "11       540  142.0  \n",
              "12       830  240.0  \n",
              "13       650  210.0  \n",
              "14       570  113.0  \n",
              "15       660  180.0  \n",
              "16       520  163.0  \n",
              "17       660  222.0  \n",
              "18       510   78.0  \n",
              "19       670  278.0  \n",
              "20       850  163.0  \n",
              "21       740  351.0  \n",
              "22       660  149.0  \n",
              "23       440  171.0  \n",
              "24       700  282.0  \n",
              "25       530  164.0  \n",
              "26       620  165.0  \n",
              "27       810  460.0  \n",
              "28       560   95.0  \n",
              "29       890  188.0  \n",
              "30       700  321.0  \n",
              "31       860  261.0  \n",
              "32       450  161.0  \n",
              "33       440   73.0  \n",
              "34       750  214.0  \n",
              "35       680  200.0  \n",
              "36       670  293.0  \n",
              "37       720  149.0  \n",
              "38       870   83.0  \n",
              "39       480  225.0  \n",
              "40       450  128.0  \n",
              "41       590  269.0  \n",
              "42       800  255.0  \n",
              "43       800  229.0  \n",
              "44       320  112.0  \n",
              "45       630  207.0  \n",
              "46       730  262.0  \n",
              "47       390   93.0  \n",
              "48       660  108.0  \n",
              "49       600  156.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c63b836-f2fb-4d41-85ea-26a8cf9113e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Murder</th>\n",
              "      <th>Assault</th>\n",
              "      <th>UrbanPop</th>\n",
              "      <th>Rape</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AlabamaAlabamaAlabamaAlabamaAlabamaAlabamaAlab...</td>\n",
              "      <td>132.0</td>\n",
              "      <td>2360</td>\n",
              "      <td>580</td>\n",
              "      <td>212.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AlaskaAlaskaAlaskaAlaskaAlaskaAlaskaAlaskaAlas...</td>\n",
              "      <td>100.0</td>\n",
              "      <td>2630</td>\n",
              "      <td>480</td>\n",
              "      <td>445.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ArizonaArizonaArizonaArizonaArizonaArizonaAriz...</td>\n",
              "      <td>81.0</td>\n",
              "      <td>2940</td>\n",
              "      <td>800</td>\n",
              "      <td>310.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ArkansasArkansasArkansasArkansasArkansasArkans...</td>\n",
              "      <td>88.0</td>\n",
              "      <td>1900</td>\n",
              "      <td>500</td>\n",
              "      <td>195.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>CaliforniaCaliforniaCaliforniaCaliforniaCalifo...</td>\n",
              "      <td>90.0</td>\n",
              "      <td>2760</td>\n",
              "      <td>910</td>\n",
              "      <td>406.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>ColoradoColoradoColoradoColoradoColoradoColora...</td>\n",
              "      <td>79.0</td>\n",
              "      <td>2040</td>\n",
              "      <td>780</td>\n",
              "      <td>387.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>ConnecticutConnecticutConnecticutConnecticutCo...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>1100</td>\n",
              "      <td>770</td>\n",
              "      <td>111.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>DelawareDelawareDelawareDelawareDelawareDelawa...</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2380</td>\n",
              "      <td>720</td>\n",
              "      <td>158.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>FloridaFloridaFloridaFloridaFloridaFloridaFlor...</td>\n",
              "      <td>154.0</td>\n",
              "      <td>3350</td>\n",
              "      <td>800</td>\n",
              "      <td>319.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>GeorgiaGeorgiaGeorgiaGeorgiaGeorgiaGeorgiaGeor...</td>\n",
              "      <td>174.0</td>\n",
              "      <td>2110</td>\n",
              "      <td>600</td>\n",
              "      <td>258.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>HawaiiHawaiiHawaiiHawaiiHawaiiHawaiiHawaiiHawa...</td>\n",
              "      <td>53.0</td>\n",
              "      <td>460</td>\n",
              "      <td>830</td>\n",
              "      <td>202.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>IdahoIdahoIdahoIdahoIdahoIdahoIdahoIdahoIdahoI...</td>\n",
              "      <td>26.0</td>\n",
              "      <td>1200</td>\n",
              "      <td>540</td>\n",
              "      <td>142.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>IllinoisIllinoisIllinoisIllinoisIllinoisIllino...</td>\n",
              "      <td>104.0</td>\n",
              "      <td>2490</td>\n",
              "      <td>830</td>\n",
              "      <td>240.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>IndianaIndianaIndianaIndianaIndianaIndianaIndi...</td>\n",
              "      <td>72.0</td>\n",
              "      <td>1130</td>\n",
              "      <td>650</td>\n",
              "      <td>210.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>IowaIowaIowaIowaIowaIowaIowaIowaIowaIowa</td>\n",
              "      <td>22.0</td>\n",
              "      <td>560</td>\n",
              "      <td>570</td>\n",
              "      <td>113.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>KansasKansasKansasKansasKansasKansasKansasKans...</td>\n",
              "      <td>60.0</td>\n",
              "      <td>1150</td>\n",
              "      <td>660</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>KentuckyKentuckyKentuckyKentuckyKentuckyKentuc...</td>\n",
              "      <td>97.0</td>\n",
              "      <td>1090</td>\n",
              "      <td>520</td>\n",
              "      <td>163.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>LouisianaLouisianaLouisianaLouisianaLouisianaL...</td>\n",
              "      <td>154.0</td>\n",
              "      <td>2490</td>\n",
              "      <td>660</td>\n",
              "      <td>222.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>MaineMaineMaineMaineMaineMaineMaineMaineMaineM...</td>\n",
              "      <td>21.0</td>\n",
              "      <td>830</td>\n",
              "      <td>510</td>\n",
              "      <td>78.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>MarylandMarylandMarylandMarylandMarylandMaryla...</td>\n",
              "      <td>113.0</td>\n",
              "      <td>3000</td>\n",
              "      <td>670</td>\n",
              "      <td>278.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>MassachusettsMassachusettsMassachusettsMassach...</td>\n",
              "      <td>44.0</td>\n",
              "      <td>1490</td>\n",
              "      <td>850</td>\n",
              "      <td>163.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>MichiganMichiganMichiganMichiganMichiganMichig...</td>\n",
              "      <td>121.0</td>\n",
              "      <td>2550</td>\n",
              "      <td>740</td>\n",
              "      <td>351.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>MinnesotaMinnesotaMinnesotaMinnesotaMinnesotaM...</td>\n",
              "      <td>27.0</td>\n",
              "      <td>720</td>\n",
              "      <td>660</td>\n",
              "      <td>149.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>MississippiMississippiMississippiMississippiMi...</td>\n",
              "      <td>161.0</td>\n",
              "      <td>2590</td>\n",
              "      <td>440</td>\n",
              "      <td>171.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>MissouriMissouriMissouriMissouriMissouriMissou...</td>\n",
              "      <td>90.0</td>\n",
              "      <td>1780</td>\n",
              "      <td>700</td>\n",
              "      <td>282.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>MontanaMontanaMontanaMontanaMontanaMontanaMont...</td>\n",
              "      <td>60.0</td>\n",
              "      <td>1090</td>\n",
              "      <td>530</td>\n",
              "      <td>164.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>NebraskaNebraskaNebraskaNebraskaNebraskaNebras...</td>\n",
              "      <td>43.0</td>\n",
              "      <td>1020</td>\n",
              "      <td>620</td>\n",
              "      <td>165.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>NevadaNevadaNevadaNevadaNevadaNevadaNevadaNeva...</td>\n",
              "      <td>122.0</td>\n",
              "      <td>2520</td>\n",
              "      <td>810</td>\n",
              "      <td>460.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>New HampshireNew HampshireNew HampshireNew Ham...</td>\n",
              "      <td>21.0</td>\n",
              "      <td>570</td>\n",
              "      <td>560</td>\n",
              "      <td>95.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>New JerseyNew JerseyNew JerseyNew JerseyNew Je...</td>\n",
              "      <td>74.0</td>\n",
              "      <td>1590</td>\n",
              "      <td>890</td>\n",
              "      <td>188.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>New MexicoNew MexicoNew MexicoNew MexicoNew Me...</td>\n",
              "      <td>114.0</td>\n",
              "      <td>2850</td>\n",
              "      <td>700</td>\n",
              "      <td>321.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>New YorkNew YorkNew YorkNew YorkNew YorkNew Yo...</td>\n",
              "      <td>111.0</td>\n",
              "      <td>2540</td>\n",
              "      <td>860</td>\n",
              "      <td>261.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>North CarolinaNorth CarolinaNorth CarolinaNort...</td>\n",
              "      <td>130.0</td>\n",
              "      <td>3370</td>\n",
              "      <td>450</td>\n",
              "      <td>161.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>North DakotaNorth DakotaNorth DakotaNorth Dako...</td>\n",
              "      <td>8.0</td>\n",
              "      <td>450</td>\n",
              "      <td>440</td>\n",
              "      <td>73.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>OhioOhioOhioOhioOhioOhioOhioOhioOhioOhio</td>\n",
              "      <td>73.0</td>\n",
              "      <td>1200</td>\n",
              "      <td>750</td>\n",
              "      <td>214.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>OklahomaOklahomaOklahomaOklahomaOklahomaOklaho...</td>\n",
              "      <td>66.0</td>\n",
              "      <td>1510</td>\n",
              "      <td>680</td>\n",
              "      <td>200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>OregonOregonOregonOregonOregonOregonOregonOreg...</td>\n",
              "      <td>49.0</td>\n",
              "      <td>1590</td>\n",
              "      <td>670</td>\n",
              "      <td>293.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>PennsylvaniaPennsylvaniaPennsylvaniaPennsylvan...</td>\n",
              "      <td>63.0</td>\n",
              "      <td>1060</td>\n",
              "      <td>720</td>\n",
              "      <td>149.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Rhode IslandRhode IslandRhode IslandRhode Isla...</td>\n",
              "      <td>34.0</td>\n",
              "      <td>1740</td>\n",
              "      <td>870</td>\n",
              "      <td>83.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>South CarolinaSouth CarolinaSouth CarolinaSout...</td>\n",
              "      <td>144.0</td>\n",
              "      <td>2790</td>\n",
              "      <td>480</td>\n",
              "      <td>225.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>South DakotaSouth DakotaSouth DakotaSouth Dako...</td>\n",
              "      <td>38.0</td>\n",
              "      <td>860</td>\n",
              "      <td>450</td>\n",
              "      <td>128.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>TennesseeTennesseeTennesseeTennesseeTennesseeT...</td>\n",
              "      <td>132.0</td>\n",
              "      <td>1880</td>\n",
              "      <td>590</td>\n",
              "      <td>269.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>TexasTexasTexasTexasTexasTexasTexasTexasTexasT...</td>\n",
              "      <td>127.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>800</td>\n",
              "      <td>255.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>UtahUtahUtahUtahUtahUtahUtahUtahUtahUtah</td>\n",
              "      <td>32.0</td>\n",
              "      <td>1200</td>\n",
              "      <td>800</td>\n",
              "      <td>229.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>VermontVermontVermontVermontVermontVermontVerm...</td>\n",
              "      <td>22.0</td>\n",
              "      <td>480</td>\n",
              "      <td>320</td>\n",
              "      <td>112.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>VirginiaVirginiaVirginiaVirginiaVirginiaVirgin...</td>\n",
              "      <td>85.0</td>\n",
              "      <td>1560</td>\n",
              "      <td>630</td>\n",
              "      <td>207.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>WashingtonWashingtonWashingtonWashingtonWashin...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>1450</td>\n",
              "      <td>730</td>\n",
              "      <td>262.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>West VirginiaWest VirginiaWest VirginiaWest Vi...</td>\n",
              "      <td>57.0</td>\n",
              "      <td>810</td>\n",
              "      <td>390</td>\n",
              "      <td>93.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>WisconsinWisconsinWisconsinWisconsinWisconsinW...</td>\n",
              "      <td>26.0</td>\n",
              "      <td>530</td>\n",
              "      <td>660</td>\n",
              "      <td>108.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>WyomingWyomingWyomingWyomingWyomingWyomingWyom...</td>\n",
              "      <td>68.0</td>\n",
              "      <td>1610</td>\n",
              "      <td>600</td>\n",
              "      <td>156.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c63b836-f2fb-4d41-85ea-26a8cf9113e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7c63b836-f2fb-4d41-85ea-26a8cf9113e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7c63b836-f2fb-4d41-85ea-26a8cf9113e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#usinggroupby\n",
        "mean_purchase =state.groupby('State')[\"Murder\"].mean().rename(\"User_mean\").reset_index() \n",
        "print(mean_purchase)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1SJf8sS5nPAD",
        "outputId": "8b584da4-8058-4d2c-b3f4-bfee9f655094"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             State  User_mean\n",
            "0          Alabama       13.2\n",
            "1           Alaska       10.0\n",
            "2          Arizona        8.1\n",
            "3         Arkansas        8.8\n",
            "4       California        9.0\n",
            "5         Colorado        7.9\n",
            "6      Connecticut        3.3\n",
            "7         Delaware        5.9\n",
            "8          Florida       15.4\n",
            "9          Georgia       17.4\n",
            "10          Hawaii        5.3\n",
            "11           Idaho        2.6\n",
            "12        Illinois       10.4\n",
            "13         Indiana        7.2\n",
            "14            Iowa        2.2\n",
            "15          Kansas        6.0\n",
            "16        Kentucky        9.7\n",
            "17       Louisiana       15.4\n",
            "18           Maine        2.1\n",
            "19        Maryland       11.3\n",
            "20   Massachusetts        4.4\n",
            "21        Michigan       12.1\n",
            "22       Minnesota        2.7\n",
            "23     Mississippi       16.1\n",
            "24        Missouri        9.0\n",
            "25         Montana        6.0\n",
            "26        Nebraska        4.3\n",
            "27          Nevada       12.2\n",
            "28   New Hampshire        2.1\n",
            "29      New Jersey        7.4\n",
            "30      New Mexico       11.4\n",
            "31        New York       11.1\n",
            "32  North Carolina       13.0\n",
            "33    North Dakota        0.8\n",
            "34            Ohio        7.3\n",
            "35        Oklahoma        6.6\n",
            "36          Oregon        4.9\n",
            "37    Pennsylvania        6.3\n",
            "38    Rhode Island        3.4\n",
            "39  South Carolina       14.4\n",
            "40    South Dakota        3.8\n",
            "41       Tennessee       13.2\n",
            "42           Texas       12.7\n",
            "43            Utah        3.2\n",
            "44         Vermont        2.2\n",
            "45        Virginia        8.5\n",
            "46      Washington        4.0\n",
            "47   West Virginia        5.7\n",
            "48       Wisconsin        2.6\n",
            "49         Wyoming        6.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mer=state.merge(mean_purchase)\n",
        "mer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "owoYdO6Fnb0G",
        "outputId": "5fcf8a53-63ed-4b74-b07c-9aa11040ae0d"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             State  Murder  Assault  UrbanPop  Rape  User_mean\n",
              "0          Alabama    13.2      236        58  21.2       13.2\n",
              "1           Alaska    10.0      263        48  44.5       10.0\n",
              "2          Arizona     8.1      294        80  31.0        8.1\n",
              "3         Arkansas     8.8      190        50  19.5        8.8\n",
              "4       California     9.0      276        91  40.6        9.0\n",
              "5         Colorado     7.9      204        78  38.7        7.9\n",
              "6      Connecticut     3.3      110        77  11.1        3.3\n",
              "7         Delaware     5.9      238        72  15.8        5.9\n",
              "8          Florida    15.4      335        80  31.9       15.4\n",
              "9          Georgia    17.4      211        60  25.8       17.4\n",
              "10          Hawaii     5.3       46        83  20.2        5.3\n",
              "11           Idaho     2.6      120        54  14.2        2.6\n",
              "12        Illinois    10.4      249        83  24.0       10.4\n",
              "13         Indiana     7.2      113        65  21.0        7.2\n",
              "14            Iowa     2.2       56        57  11.3        2.2\n",
              "15          Kansas     6.0      115        66  18.0        6.0\n",
              "16        Kentucky     9.7      109        52  16.3        9.7\n",
              "17       Louisiana    15.4      249        66  22.2       15.4\n",
              "18           Maine     2.1       83        51   7.8        2.1\n",
              "19        Maryland    11.3      300        67  27.8       11.3\n",
              "20   Massachusetts     4.4      149        85  16.3        4.4\n",
              "21        Michigan    12.1      255        74  35.1       12.1\n",
              "22       Minnesota     2.7       72        66  14.9        2.7\n",
              "23     Mississippi    16.1      259        44  17.1       16.1\n",
              "24        Missouri     9.0      178        70  28.2        9.0\n",
              "25         Montana     6.0      109        53  16.4        6.0\n",
              "26        Nebraska     4.3      102        62  16.5        4.3\n",
              "27          Nevada    12.2      252        81  46.0       12.2\n",
              "28   New Hampshire     2.1       57        56   9.5        2.1\n",
              "29      New Jersey     7.4      159        89  18.8        7.4\n",
              "30      New Mexico    11.4      285        70  32.1       11.4\n",
              "31        New York    11.1      254        86  26.1       11.1\n",
              "32  North Carolina    13.0      337        45  16.1       13.0\n",
              "33    North Dakota     0.8       45        44   7.3        0.8\n",
              "34            Ohio     7.3      120        75  21.4        7.3\n",
              "35        Oklahoma     6.6      151        68  20.0        6.6\n",
              "36          Oregon     4.9      159        67  29.3        4.9\n",
              "37    Pennsylvania     6.3      106        72  14.9        6.3\n",
              "38    Rhode Island     3.4      174        87   8.3        3.4\n",
              "39  South Carolina    14.4      279        48  22.5       14.4\n",
              "40    South Dakota     3.8       86        45  12.8        3.8\n",
              "41       Tennessee    13.2      188        59  26.9       13.2\n",
              "42           Texas    12.7      201        80  25.5       12.7\n",
              "43            Utah     3.2      120        80  22.9        3.2\n",
              "44         Vermont     2.2       48        32  11.2        2.2\n",
              "45        Virginia     8.5      156        63  20.7        8.5\n",
              "46      Washington     4.0      145        73  26.2        4.0\n",
              "47   West Virginia     5.7       81        39   9.3        5.7\n",
              "48       Wisconsin     2.6       53        66  10.8        2.6\n",
              "49         Wyoming     6.8      161        60  15.6        6.8"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecc546d8-d9d8-41b2-9f83-e0dbf76c8466\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Murder</th>\n",
              "      <th>Assault</th>\n",
              "      <th>UrbanPop</th>\n",
              "      <th>Rape</th>\n",
              "      <th>User_mean</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>13.2</td>\n",
              "      <td>236</td>\n",
              "      <td>58</td>\n",
              "      <td>21.2</td>\n",
              "      <td>13.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alaska</td>\n",
              "      <td>10.0</td>\n",
              "      <td>263</td>\n",
              "      <td>48</td>\n",
              "      <td>44.5</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>8.1</td>\n",
              "      <td>294</td>\n",
              "      <td>80</td>\n",
              "      <td>31.0</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arkansas</td>\n",
              "      <td>8.8</td>\n",
              "      <td>190</td>\n",
              "      <td>50</td>\n",
              "      <td>19.5</td>\n",
              "      <td>8.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>California</td>\n",
              "      <td>9.0</td>\n",
              "      <td>276</td>\n",
              "      <td>91</td>\n",
              "      <td>40.6</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Colorado</td>\n",
              "      <td>7.9</td>\n",
              "      <td>204</td>\n",
              "      <td>78</td>\n",
              "      <td>38.7</td>\n",
              "      <td>7.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Connecticut</td>\n",
              "      <td>3.3</td>\n",
              "      <td>110</td>\n",
              "      <td>77</td>\n",
              "      <td>11.1</td>\n",
              "      <td>3.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Delaware</td>\n",
              "      <td>5.9</td>\n",
              "      <td>238</td>\n",
              "      <td>72</td>\n",
              "      <td>15.8</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Florida</td>\n",
              "      <td>15.4</td>\n",
              "      <td>335</td>\n",
              "      <td>80</td>\n",
              "      <td>31.9</td>\n",
              "      <td>15.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Georgia</td>\n",
              "      <td>17.4</td>\n",
              "      <td>211</td>\n",
              "      <td>60</td>\n",
              "      <td>25.8</td>\n",
              "      <td>17.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Hawaii</td>\n",
              "      <td>5.3</td>\n",
              "      <td>46</td>\n",
              "      <td>83</td>\n",
              "      <td>20.2</td>\n",
              "      <td>5.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Idaho</td>\n",
              "      <td>2.6</td>\n",
              "      <td>120</td>\n",
              "      <td>54</td>\n",
              "      <td>14.2</td>\n",
              "      <td>2.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Illinois</td>\n",
              "      <td>10.4</td>\n",
              "      <td>249</td>\n",
              "      <td>83</td>\n",
              "      <td>24.0</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Indiana</td>\n",
              "      <td>7.2</td>\n",
              "      <td>113</td>\n",
              "      <td>65</td>\n",
              "      <td>21.0</td>\n",
              "      <td>7.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Iowa</td>\n",
              "      <td>2.2</td>\n",
              "      <td>56</td>\n",
              "      <td>57</td>\n",
              "      <td>11.3</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Kansas</td>\n",
              "      <td>6.0</td>\n",
              "      <td>115</td>\n",
              "      <td>66</td>\n",
              "      <td>18.0</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Kentucky</td>\n",
              "      <td>9.7</td>\n",
              "      <td>109</td>\n",
              "      <td>52</td>\n",
              "      <td>16.3</td>\n",
              "      <td>9.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Louisiana</td>\n",
              "      <td>15.4</td>\n",
              "      <td>249</td>\n",
              "      <td>66</td>\n",
              "      <td>22.2</td>\n",
              "      <td>15.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Maine</td>\n",
              "      <td>2.1</td>\n",
              "      <td>83</td>\n",
              "      <td>51</td>\n",
              "      <td>7.8</td>\n",
              "      <td>2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Maryland</td>\n",
              "      <td>11.3</td>\n",
              "      <td>300</td>\n",
              "      <td>67</td>\n",
              "      <td>27.8</td>\n",
              "      <td>11.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Massachusetts</td>\n",
              "      <td>4.4</td>\n",
              "      <td>149</td>\n",
              "      <td>85</td>\n",
              "      <td>16.3</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Michigan</td>\n",
              "      <td>12.1</td>\n",
              "      <td>255</td>\n",
              "      <td>74</td>\n",
              "      <td>35.1</td>\n",
              "      <td>12.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Minnesota</td>\n",
              "      <td>2.7</td>\n",
              "      <td>72</td>\n",
              "      <td>66</td>\n",
              "      <td>14.9</td>\n",
              "      <td>2.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Mississippi</td>\n",
              "      <td>16.1</td>\n",
              "      <td>259</td>\n",
              "      <td>44</td>\n",
              "      <td>17.1</td>\n",
              "      <td>16.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Missouri</td>\n",
              "      <td>9.0</td>\n",
              "      <td>178</td>\n",
              "      <td>70</td>\n",
              "      <td>28.2</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Montana</td>\n",
              "      <td>6.0</td>\n",
              "      <td>109</td>\n",
              "      <td>53</td>\n",
              "      <td>16.4</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Nebraska</td>\n",
              "      <td>4.3</td>\n",
              "      <td>102</td>\n",
              "      <td>62</td>\n",
              "      <td>16.5</td>\n",
              "      <td>4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Nevada</td>\n",
              "      <td>12.2</td>\n",
              "      <td>252</td>\n",
              "      <td>81</td>\n",
              "      <td>46.0</td>\n",
              "      <td>12.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>New Hampshire</td>\n",
              "      <td>2.1</td>\n",
              "      <td>57</td>\n",
              "      <td>56</td>\n",
              "      <td>9.5</td>\n",
              "      <td>2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>New Jersey</td>\n",
              "      <td>7.4</td>\n",
              "      <td>159</td>\n",
              "      <td>89</td>\n",
              "      <td>18.8</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>New Mexico</td>\n",
              "      <td>11.4</td>\n",
              "      <td>285</td>\n",
              "      <td>70</td>\n",
              "      <td>32.1</td>\n",
              "      <td>11.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>New York</td>\n",
              "      <td>11.1</td>\n",
              "      <td>254</td>\n",
              "      <td>86</td>\n",
              "      <td>26.1</td>\n",
              "      <td>11.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>North Carolina</td>\n",
              "      <td>13.0</td>\n",
              "      <td>337</td>\n",
              "      <td>45</td>\n",
              "      <td>16.1</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>North Dakota</td>\n",
              "      <td>0.8</td>\n",
              "      <td>45</td>\n",
              "      <td>44</td>\n",
              "      <td>7.3</td>\n",
              "      <td>0.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Ohio</td>\n",
              "      <td>7.3</td>\n",
              "      <td>120</td>\n",
              "      <td>75</td>\n",
              "      <td>21.4</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>Oklahoma</td>\n",
              "      <td>6.6</td>\n",
              "      <td>151</td>\n",
              "      <td>68</td>\n",
              "      <td>20.0</td>\n",
              "      <td>6.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Oregon</td>\n",
              "      <td>4.9</td>\n",
              "      <td>159</td>\n",
              "      <td>67</td>\n",
              "      <td>29.3</td>\n",
              "      <td>4.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>6.3</td>\n",
              "      <td>106</td>\n",
              "      <td>72</td>\n",
              "      <td>14.9</td>\n",
              "      <td>6.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Rhode Island</td>\n",
              "      <td>3.4</td>\n",
              "      <td>174</td>\n",
              "      <td>87</td>\n",
              "      <td>8.3</td>\n",
              "      <td>3.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>South Carolina</td>\n",
              "      <td>14.4</td>\n",
              "      <td>279</td>\n",
              "      <td>48</td>\n",
              "      <td>22.5</td>\n",
              "      <td>14.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>South Dakota</td>\n",
              "      <td>3.8</td>\n",
              "      <td>86</td>\n",
              "      <td>45</td>\n",
              "      <td>12.8</td>\n",
              "      <td>3.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>Tennessee</td>\n",
              "      <td>13.2</td>\n",
              "      <td>188</td>\n",
              "      <td>59</td>\n",
              "      <td>26.9</td>\n",
              "      <td>13.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Texas</td>\n",
              "      <td>12.7</td>\n",
              "      <td>201</td>\n",
              "      <td>80</td>\n",
              "      <td>25.5</td>\n",
              "      <td>12.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>Utah</td>\n",
              "      <td>3.2</td>\n",
              "      <td>120</td>\n",
              "      <td>80</td>\n",
              "      <td>22.9</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>Vermont</td>\n",
              "      <td>2.2</td>\n",
              "      <td>48</td>\n",
              "      <td>32</td>\n",
              "      <td>11.2</td>\n",
              "      <td>2.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Virginia</td>\n",
              "      <td>8.5</td>\n",
              "      <td>156</td>\n",
              "      <td>63</td>\n",
              "      <td>20.7</td>\n",
              "      <td>8.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Washington</td>\n",
              "      <td>4.0</td>\n",
              "      <td>145</td>\n",
              "      <td>73</td>\n",
              "      <td>26.2</td>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>West Virginia</td>\n",
              "      <td>5.7</td>\n",
              "      <td>81</td>\n",
              "      <td>39</td>\n",
              "      <td>9.3</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Wisconsin</td>\n",
              "      <td>2.6</td>\n",
              "      <td>53</td>\n",
              "      <td>66</td>\n",
              "      <td>10.8</td>\n",
              "      <td>2.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Wyoming</td>\n",
              "      <td>6.8</td>\n",
              "      <td>161</td>\n",
              "      <td>60</td>\n",
              "      <td>15.6</td>\n",
              "      <td>6.8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecc546d8-d9d8-41b2-9f83-e0dbf76c8466')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ecc546d8-d9d8-41b2-9f83-e0dbf76c8466 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ecc546d8-d9d8-41b2-9f83-e0dbf76c8466');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for missing values\n",
        "print(state.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fsQQ88yOnicQ",
        "outputId": "eedc59fe-256c-485e-8caf-e2a90fc40126"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "State       0\n",
            "Murder      0\n",
            "Assault     0\n",
            "UrbanPop    0\n",
            "Rape        0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "cols=['col0', 'col1', 'col2', 'col3', 'col4']\n",
        "rows=['row0', 'row1', 'row2', 'row3', 'row4']\n",
        "data=np.random.randint(0, 100, size=(5,5))\n",
        "df=pd.DataFrame(data, columns=cols, index=rows)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "72o0-jdbnoDe",
        "outputId": "d85c5645-cef2-4e97-85ce-3be9138f3a36"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col1  col2  col3  col4\n",
              "row0    41    14    79    73    32\n",
              "row1    97    17    58    61    25\n",
              "row2    18    50    29     4    31\n",
              "row3    95    63    31    46    62\n",
              "row4    86    67    46    96    12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e0b01dd-0d41-4283-af8d-25541f10eb21\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41</td>\n",
              "      <td>14</td>\n",
              "      <td>79</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97</td>\n",
              "      <td>17</td>\n",
              "      <td>58</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18</td>\n",
              "      <td>50</td>\n",
              "      <td>29</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95</td>\n",
              "      <td>63</td>\n",
              "      <td>31</td>\n",
              "      <td>46</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>86</td>\n",
              "      <td>67</td>\n",
              "      <td>46</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e0b01dd-0d41-4283-af8d-25541f10eb21')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e0b01dd-0d41-4283-af8d-25541f10eb21 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e0b01dd-0d41-4283-af8d-25541f10eb21');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.iloc[4,2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gQS4IRuAnuwR",
        "outputId": "97777ac2-b247-4c79-897b-8d283bdc6e77"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "46"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.iloc[3, 3]=0\n",
        "df.iloc[1, 2]=np.nan\n",
        "df.iloc[4, 0]=np.nan\n",
        "df['col5']=0\n",
        "df['col6']=np.nan\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "99CBGspSn2JW",
        "outputId": "81f47f46-bad0-4f2e-f05c-1e58b5dbf89d"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col1  col2  col3  col4  col5  col6\n",
              "row0  41.0    14  79.0    73    32     0   NaN\n",
              "row1  97.0    17   NaN    61    25     0   NaN\n",
              "row2  18.0    50  29.0     4    31     0   NaN\n",
              "row3  95.0    63  31.0     0    62     0   NaN\n",
              "row4   NaN    67  46.0    96    12     0   NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfb6bcab-7c29-4f36-b01f-15aaf8bd0867\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "      <th>col5</th>\n",
              "      <th>col6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>14</td>\n",
              "      <td>79.0</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>50</td>\n",
              "      <td>29.0</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>63</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>67</td>\n",
              "      <td>46.0</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfb6bcab-7c29-4f36-b01f-15aaf8bd0867')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dfb6bcab-7c29-4f36-b01f-15aaf8bd0867 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dfb6bcab-7c29-4f36-b01f-15aaf8bd0867');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:,df.all()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "y8XiA670n781",
        "outputId": "3548f90c-953d-446f-ec23-8d7c2fbf9df6"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col1  col2  col4  col6\n",
              "row0  41.0    14  79.0    32   NaN\n",
              "row1  97.0    17   NaN    25   NaN\n",
              "row2  18.0    50  29.0    31   NaN\n",
              "row3  95.0    63  31.0    62   NaN\n",
              "row4   NaN    67  46.0    12   NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd95c859-4ec9-4b03-9c3b-b8aa914fafee\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col4</th>\n",
              "      <th>col6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>14</td>\n",
              "      <td>79.0</td>\n",
              "      <td>32</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>25</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>50</td>\n",
              "      <td>29.0</td>\n",
              "      <td>31</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>63</td>\n",
              "      <td>31.0</td>\n",
              "      <td>62</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>67</td>\n",
              "      <td>46.0</td>\n",
              "      <td>12</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd95c859-4ec9-4b03-9c3b-b8aa914fafee')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd95c859-4ec9-4b03-9c3b-b8aa914fafee button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd95c859-4ec9-4b03-9c3b-b8aa914fafee');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:,df.any()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wjh2OMfZoApN",
        "outputId": "e2ee187c-e781-45fe-8b9a-c63af2f24dda"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col1  col2  col3  col4\n",
              "row0  41.0    14  79.0    73    32\n",
              "row1  97.0    17   NaN    61    25\n",
              "row2  18.0    50  29.0     4    31\n",
              "row3  95.0    63  31.0     0    62\n",
              "row4   NaN    67  46.0    96    12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9bf29673-3502-453e-beda-8d1dbae3e39a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>14</td>\n",
              "      <td>79.0</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>50</td>\n",
              "      <td>29.0</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>63</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>67</td>\n",
              "      <td>46.0</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bf29673-3502-453e-beda-8d1dbae3e39a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9bf29673-3502-453e-beda-8d1dbae3e39a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9bf29673-3502-453e-beda-8d1dbae3e39a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:,df.isnull().any()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "sz6M0lVsoFm9",
        "outputId": "2a471e6a-9327-4d23-e149-324af93a265c"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col2  col6\n",
              "row0  41.0  79.0   NaN\n",
              "row1  97.0   NaN   NaN\n",
              "row2  18.0  29.0   NaN\n",
              "row3  95.0  31.0   NaN\n",
              "row4   NaN  46.0   NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-15d0a920-7929-4766-a849-6c239586b4a5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col2</th>\n",
              "      <th>col6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>46.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15d0a920-7929-4766-a849-6c239586b4a5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-15d0a920-7929-4766-a849-6c239586b4a5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-15d0a920-7929-4766-a849-6c239586b4a5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:,df.notnull().all()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Lcuyt7iioKLs",
        "outputId": "e984ee54-998f-4a89-edb0-8993b6c53d25"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col1  col3  col4  col5\n",
              "row0    14    73    32     0\n",
              "row1    17    61    25     0\n",
              "row2    50     4    31     0\n",
              "row3    63     0    62     0\n",
              "row4    67    96    12     0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1cc60b8f-1be7-4b45-9df7-f8ae3441362f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col1</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "      <th>col5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>14</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>17</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>50</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>67</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cc60b8f-1be7-4b45-9df7-f8ae3441362f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1cc60b8f-1be7-4b45-9df7-f8ae3441362f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1cc60b8f-1be7-4b45-9df7-f8ae3441362f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(how=\"all\",axis=0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "TS6qyrVaoQPF",
        "outputId": "0d30964d-95ad-473a-ece6-95dabb404edb"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      col0  col1  col2  col3  col4  col5  col6\n",
              "row0  41.0    14  79.0    73    32     0   NaN\n",
              "row1  97.0    17   NaN    61    25     0   NaN\n",
              "row2  18.0    50  29.0     4    31     0   NaN\n",
              "row3  95.0    63  31.0     0    62     0   NaN\n",
              "row4   NaN    67  46.0    96    12     0   NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-58e2050f-4098-40c4-a932-bf3919654e39\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "      <th>col5</th>\n",
              "      <th>col6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>14</td>\n",
              "      <td>79.0</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>50</td>\n",
              "      <td>29.0</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>63</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>67</td>\n",
              "      <td>46.0</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-58e2050f-4098-40c4-a932-bf3919654e39')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-58e2050f-4098-40c4-a932-bf3919654e39 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-58e2050f-4098-40c4-a932-bf3919654e39');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.fillna(df.sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "gM02QCNBoVC6",
        "outputId": "928a1328-8fca-4721-819c-dc63fa03d74d"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       col0  col1   col2  col3  col4  col5  col6\n",
              "row0   41.0    14   79.0    73    32     0   0.0\n",
              "row1   97.0    17  185.0    61    25     0   0.0\n",
              "row2   18.0    50   29.0     4    31     0   0.0\n",
              "row3   95.0    63   31.0     0    62     0   0.0\n",
              "row4  251.0    67   46.0    96    12     0   0.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5696b4f6-4d4d-4960-a44e-eff725c1400c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col0</th>\n",
              "      <th>col1</th>\n",
              "      <th>col2</th>\n",
              "      <th>col3</th>\n",
              "      <th>col4</th>\n",
              "      <th>col5</th>\n",
              "      <th>col6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>row0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>14</td>\n",
              "      <td>79.0</td>\n",
              "      <td>73</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row1</th>\n",
              "      <td>97.0</td>\n",
              "      <td>17</td>\n",
              "      <td>185.0</td>\n",
              "      <td>61</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row2</th>\n",
              "      <td>18.0</td>\n",
              "      <td>50</td>\n",
              "      <td>29.0</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row3</th>\n",
              "      <td>95.0</td>\n",
              "      <td>63</td>\n",
              "      <td>31.0</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>row4</th>\n",
              "      <td>251.0</td>\n",
              "      <td>67</td>\n",
              "      <td>46.0</td>\n",
              "      <td>96</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5696b4f6-4d4d-4960-a44e-eff725c1400c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5696b4f6-4d4d-4960-a44e-eff725c1400c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5696b4f6-4d4d-4960-a44e-eff725c1400c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Demonstrate transfomr function using pandas in python\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "data = pd.DataFrame({\n",
        "    'C' : [random.choice(('a','b','c')) for i in range(1000000)],\n",
        "    'A' : [random.randint(1,10) for i in range(1000000)],\n",
        "    'B' : [random.randint(1,10) for i in range(1000000)]\n",
        "\n",
        "})\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "nv1vIqs2oZcd",
        "outputId": "4ba82f6a-8cd4-4a06-f8f6-37d8999a67f5"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        C   A   B\n",
              "0       b   6  10\n",
              "1       a   2   4\n",
              "2       c  10   2\n",
              "3       b   5   2\n",
              "4       b   5   9\n",
              "...    ..  ..  ..\n",
              "999995  c   5   6\n",
              "999996  a   2   7\n",
              "999997  a   2   8\n",
              "999998  b   6   8\n",
              "999999  a   6   5\n",
              "\n",
              "[1000000 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c86caa2-68d9-4038-bf4d-6e8f54da2942\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>a</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999995</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999996</th>\n",
              "      <td>a</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999997</th>\n",
              "      <td>a</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999998</th>\n",
              "      <td>b</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999999</th>\n",
              "      <td>a</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000000 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c86caa2-68d9-4038-bf4d-6e8f54da2942')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2c86caa2-68d9-4038-bf4d-6e8f54da2942 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2c86caa2-68d9-4038-bf4d-6e8f54da2942');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v=data.groupby('C')[\"A\"].mean\n",
        "v"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l0MsSkEWoj8f",
        "outputId": "ca0114f3-c107-4876-fbcb-7bc2cf99e9b4"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method GroupBy.mean of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7ffa7e4d9510>>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean=data.groupby('C')[\"A\"].mean().rename(\"D\").reset_index()\n",
        "mean"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "jutBzsfuopY6",
        "outputId": "46c19d2b-6782-4dea-abff-079d4322e6bd"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   C         D\n",
              "0  a  5.498506\n",
              "1  b  5.497664\n",
              "2  c  5.508675"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c28e42c9-4f2a-4814-9d61-5256fa472110\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "      <td>5.498506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c28e42c9-4f2a-4814-9d61-5256fa472110')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c28e42c9-4f2a-4814-9d61-5256fa472110 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c28e42c9-4f2a-4814-9d61-5256fa472110');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_1=data.merge(mean)\n",
        "df_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "95ncYeflot4H",
        "outputId": "55d5d76c-19d0-4ba0-b563-1140ceb2bd8f"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        C  A   B         D\n",
              "0       b  6  10  5.497664\n",
              "1       b  5   2  5.497664\n",
              "2       b  5   9  5.497664\n",
              "3       b  3   3  5.497664\n",
              "4       b  4  10  5.497664\n",
              "...    .. ..  ..       ...\n",
              "999995  c  5   6  5.508675\n",
              "999996  c  8   2  5.508675\n",
              "999997  c  5   3  5.508675\n",
              "999998  c  1   2  5.508675\n",
              "999999  c  5   6  5.508675\n",
              "\n",
              "[1000000 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70489002-f9ac-4854-81dc-9fe3ea2545de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>b</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999995</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999996</th>\n",
              "      <td>c</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999997</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999998</th>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999999</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000000 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70489002-f9ac-4854-81dc-9fe3ea2545de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-70489002-f9ac-4854-81dc-9fe3ea2545de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-70489002-f9ac-4854-81dc-9fe3ea2545de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "v=data.groupby('C')[\"A\"].mean\n",
        "v"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7lyMGnCjo15O",
        "outputId": "5e0ce1be-c390-4517-a219-4740f968b074"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method GroupBy.mean of <pandas.core.groupby.generic.SeriesGroupBy object at 0x7ffa7edfa590>>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean=data.groupby('C')[\"A\"].mean().rename(\"D\").reset_index()\n",
        "mean"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "MF_2e8G_pEzO",
        "outputId": "0d1e93f4-966a-4e41-bad3-5632eec19efb"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   C         D\n",
              "0  a  5.498506\n",
              "1  b  5.497664\n",
              "2  c  5.508675"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17dd8880-75cb-42cc-97e9-2c51e6baa28b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "      <td>5.498506</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17dd8880-75cb-42cc-97e9-2c51e6baa28b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-17dd8880-75cb-42cc-97e9-2c51e6baa28b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-17dd8880-75cb-42cc-97e9-2c51e6baa28b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_1=data.merge(mean)\n",
        "df_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ZAbL0wN0pJ23",
        "outputId": "f03efc3d-497d-47ee-cfa4-be8cc56e7b43"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        C  A   B         D\n",
              "0       b  6  10  5.497664\n",
              "1       b  5   2  5.497664\n",
              "2       b  5   9  5.497664\n",
              "3       b  3   3  5.497664\n",
              "4       b  4  10  5.497664\n",
              "...    .. ..  ..       ...\n",
              "999995  c  5   6  5.508675\n",
              "999996  c  8   2  5.508675\n",
              "999997  c  5   3  5.508675\n",
              "999998  c  1   2  5.508675\n",
              "999999  c  5   6  5.508675\n",
              "\n",
              "[1000000 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01a3b85e-e703-494e-8984-3814bb0a05a9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>C</th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>D</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>b</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>b</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>b</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>b</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>5.497664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999995</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999996</th>\n",
              "      <td>c</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999997</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999998</th>\n",
              "      <td>c</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999999</th>\n",
              "      <td>c</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>5.508675</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000000 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01a3b85e-e703-494e-8984-3814bb0a05a9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-01a3b85e-e703-494e-8984-3814bb0a05a9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-01a3b85e-e703-494e-8984-3814bb0a05a9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "pratical **2,3**\n"
      ],
      "metadata": {
        "id": "liFuGE7Lp2pi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# create a figure and axis\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "\n",
        "x = [2, 4, 6, 6, 9, 2, 7, 2, 6, 1, 8, 4, 5, 9, 1, 2, 3, 7, 5, 8, 1, 3]\n",
        "y = [7, 8, 2, 4, 6, 4, 9, 5, 9, 3, 6, 7, 2, 4, 6, 7, 1, 9, 4, 3, 6, 9]\n",
        "\n",
        "ax.scatter(x, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "moEKtAeMp7or",
        "outputId": "a73d5836-d0ea-43cb-87d9-44c60cf6a986"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ffa7edd93d0>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "cars_data=pd.read_csv('Toyota.csv',index_col=0)\n",
        "cars_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oK9LVVL-rSPS",
        "outputId": "e400a5b5-462a-4189-c220-5890fea6aa00"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Price   Age     KM FuelType  HP  MetColor  Automatic    CC  Doors  Weight\n",
              "0  13500  23.0  46986   Diesel  90       1.0          0  2000  three    1165\n",
              "1  13750  23.0  72937   Diesel  90       1.0          0  2000      3    1165\n",
              "2  13950  24.0  41711   Diesel  90       NaN          0  2000      3    1165\n",
              "3  14950  26.0  48000   Diesel  90       0.0          0  2000      3    1165\n",
              "4  13750  30.0  38500   Diesel  90       0.0          0  2000      3    1170"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7eea554-f8cd-40ef-aeee-e8b799935ef6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>KM</th>\n",
              "      <th>FuelType</th>\n",
              "      <th>HP</th>\n",
              "      <th>MetColor</th>\n",
              "      <th>Automatic</th>\n",
              "      <th>CC</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>13500</td>\n",
              "      <td>23.0</td>\n",
              "      <td>46986</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>three</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13750</td>\n",
              "      <td>23.0</td>\n",
              "      <td>72937</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13950</td>\n",
              "      <td>24.0</td>\n",
              "      <td>41711</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14950</td>\n",
              "      <td>26.0</td>\n",
              "      <td>48000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13750</td>\n",
              "      <td>30.0</td>\n",
              "      <td>38500</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7eea554-f8cd-40ef-aeee-e8b799935ef6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e7eea554-f8cd-40ef-aeee-e8b799935ef6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e7eea554-f8cd-40ef-aeee-e8b799935ef6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.scatter(cars_data['Age'],cars_data['Price'], c='red')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "qjEXYay1rXvQ",
        "outputId": "7a18ed21-1632-4bd9-9430-a84ea40b4680"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "x=range(1,6)\n",
        "y=np.random.randint(1,20,5)\n",
        "plt.plot(x,y)\n",
        "\n",
        "plt.xticks(x)\n",
        "plt.yticks(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "A9zdL0V1rjMT",
        "outputId": "35cdf3df-9ce4-4767-deb5-4d824da9d513"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([<matplotlib.axis.YTick at 0x7ffa7e7e3510>,\n",
              "  <matplotlib.axis.YTick at 0x7ffa7e893510>,\n",
              "  <matplotlib.axis.YTick at 0x7ffa7e7da2d0>,\n",
              "  <matplotlib.axis.YTick at 0x7ffa7e786f10>,\n",
              "  <matplotlib.axis.YTick at 0x7ffa7e78fdd0>],\n",
              " <a list of 5 Text major ticklabel objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 75
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# create a figure and axis\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "x = [2, 4, 6, 6, 9, 2, 7, 2, 6, 1, 8, 4, 5, 9, 1, 2, 3, 7, 5, 8, 1, 3]\n",
        "y = [7, 8, 2, 4, 6, 4, 9, 5, 9, 3, 6, 7, 2, 4, 6, 7, 1, 9, 4, 3, 6, 9]\n",
        "ax.plot(x,y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "sO2NSLiNroTy",
        "outputId": "b7cc19dd-0265-437e-e3f6-0576b22bb3da"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ffa7e765610>]"
            ]
          },
          "metadata": {},
          "execution_count": 76
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.DataFrame({\n",
        "    'name':['john','mary','peter','jeff','bill','lisa','jose'],\n",
        "    'age':[23,78,22,19,45,33,20],\n",
        "    'gender':['M','F','M','M','M','F','M'],\n",
        "    'state':['california','dc','california','dc','california','texas','texas'],\n",
        "    'num_children':[2,0,0,3,2,1,4],\n",
        "    'num_pets':[5,1,0,5,2,2,3]\n",
        "})\n",
        "# From pandas to plot multiple plots on same figure\n",
        "# gca stands for 'get current axis'\n",
        "ax = plt.gca()\n",
        "\n",
        "df.plot(kind='line',x='name',y='num_children',ax=ax)\n",
        "df.plot(kind='line',x='name',y='num_pets', color='red',ax=ax)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "ccLudxxDrtoi",
        "outputId": "7588707e-943a-470e-e5a3-0cbe6fbc9c25"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7e6acf90>"
            ]
          },
          "metadata": {},
          "execution_count": 77
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_reviews = pd.read_csv('winemag-data-130k-v2.csv', index_col=0)\n",
        "wine_reviews.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 687
        },
        "id": "jfUl5fTkszeI",
        "outputId": "5499c6ac-94a6-4949-8b77-66a3823d4333"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    country                                        description  \\\n",
              "0     Italy  Aromas include tropical fruit, broom, brimston...   \n",
              "1  Portugal  This is ripe and fruity, a wine that is smooth...   \n",
              "2        US  Tart and snappy, the flavors of lime flesh and...   \n",
              "3        US  Pineapple rind, lemon pith and orange blossom ...   \n",
              "4        US  Much like the regular bottling from 2012, this...   \n",
              "\n",
              "                          designation  points  price           province  \\\n",
              "0                        Vulkà Bianco    87.0    NaN  Sicily & Sardinia   \n",
              "1                            Avidagos    87.0   15.0              Douro   \n",
              "2                                 NaN    87.0   14.0             Oregon   \n",
              "3                Reserve Late Harvest    87.0   13.0           Michigan   \n",
              "4  Vintner's Reserve Wild Child Block    87.0   65.0             Oregon   \n",
              "\n",
              "              region_1           region_2         taster_name  \\\n",
              "0                 Etna                NaN       Kerin O’Keefe   \n",
              "1                  NaN                NaN          Roger Voss   \n",
              "2    Willamette Valley  Willamette Valley        Paul Gregutt   \n",
              "3  Lake Michigan Shore                NaN  Alexander Peartree   \n",
              "4    Willamette Valley  Willamette Valley        Paul Gregutt   \n",
              "\n",
              "  taster_twitter_handle                                              title  \\\n",
              "0          @kerinokeefe                  Nicosia 2013 Vulkà Bianco  (Etna)   \n",
              "1            @vossroger      Quinta dos Avidagos 2011 Avidagos Red (Douro)   \n",
              "2           @paulgwine       Rainstorm 2013 Pinot Gris (Willamette Valley)   \n",
              "3                   NaN  St. Julian 2013 Reserve Late Harvest Riesling ...   \n",
              "4           @paulgwine   Sweet Cheeks 2012 Vintner's Reserve Wild Child...   \n",
              "\n",
              "          variety               winery  \n",
              "0     White Blend              Nicosia  \n",
              "1  Portuguese Red  Quinta dos Avidagos  \n",
              "2      Pinot Gris            Rainstorm  \n",
              "3        Riesling           St. Julian  \n",
              "4      Pinot Noir         Sweet Cheeks  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53ace3f5-32f7-466a-8e51-a3b27d2e14c2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>country</th>\n",
              "      <th>description</th>\n",
              "      <th>designation</th>\n",
              "      <th>points</th>\n",
              "      <th>price</th>\n",
              "      <th>province</th>\n",
              "      <th>region_1</th>\n",
              "      <th>region_2</th>\n",
              "      <th>taster_name</th>\n",
              "      <th>taster_twitter_handle</th>\n",
              "      <th>title</th>\n",
              "      <th>variety</th>\n",
              "      <th>winery</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Italy</td>\n",
              "      <td>Aromas include tropical fruit, broom, brimston...</td>\n",
              "      <td>Vulkà Bianco</td>\n",
              "      <td>87.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Sicily &amp; Sardinia</td>\n",
              "      <td>Etna</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Kerin O’Keefe</td>\n",
              "      <td>@kerinokeefe</td>\n",
              "      <td>Nicosia 2013 Vulkà Bianco  (Etna)</td>\n",
              "      <td>White Blend</td>\n",
              "      <td>Nicosia</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>This is ripe and fruity, a wine that is smooth...</td>\n",
              "      <td>Avidagos</td>\n",
              "      <td>87.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>Douro</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Roger Voss</td>\n",
              "      <td>@vossroger</td>\n",
              "      <td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td>\n",
              "      <td>Portuguese Red</td>\n",
              "      <td>Quinta dos Avidagos</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>US</td>\n",
              "      <td>Tart and snappy, the flavors of lime flesh and...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>87.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>Oregon</td>\n",
              "      <td>Willamette Valley</td>\n",
              "      <td>Willamette Valley</td>\n",
              "      <td>Paul Gregutt</td>\n",
              "      <td>@paulgwine</td>\n",
              "      <td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td>\n",
              "      <td>Pinot Gris</td>\n",
              "      <td>Rainstorm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>US</td>\n",
              "      <td>Pineapple rind, lemon pith and orange blossom ...</td>\n",
              "      <td>Reserve Late Harvest</td>\n",
              "      <td>87.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>Michigan</td>\n",
              "      <td>Lake Michigan Shore</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Alexander Peartree</td>\n",
              "      <td>NaN</td>\n",
              "      <td>St. Julian 2013 Reserve Late Harvest Riesling ...</td>\n",
              "      <td>Riesling</td>\n",
              "      <td>St. Julian</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>US</td>\n",
              "      <td>Much like the regular bottling from 2012, this...</td>\n",
              "      <td>Vintner's Reserve Wild Child Block</td>\n",
              "      <td>87.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>Oregon</td>\n",
              "      <td>Willamette Valley</td>\n",
              "      <td>Willamette Valley</td>\n",
              "      <td>Paul Gregutt</td>\n",
              "      <td>@paulgwine</td>\n",
              "      <td>Sweet Cheeks 2012 Vintner's Reserve Wild Child...</td>\n",
              "      <td>Pinot Noir</td>\n",
              "      <td>Sweet Cheeks</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53ace3f5-32f7-466a-8e51-a3b27d2e14c2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-53ace3f5-32f7-466a-8e51-a3b27d2e14c2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-53ace3f5-32f7-466a-8e51-a3b27d2e14c2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Bar Chart\n",
        "# create a figure and axis \n",
        "fig, ax = plt.subplots() \n",
        "# count the occurrence of each class \n",
        "data = wine_reviews['points'].value_counts() \n",
        "# get x and y data \n",
        "points = data.index \n",
        "frequency = data.values \n",
        "# create bar chart \n",
        "ax.bar(points, frequency) \n",
        "# set title and labels \n",
        "ax.set_title('Wine Review Scores') \n",
        "ax.set_xlabel('Points') \n",
        "ax.set_ylabel('Frequency')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "rB3JVA8ntAy8",
        "outputId": "82424bb1-1fa6-4ddc-e0a6-48e7022fa32b"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Frequency')"
            ]
          },
          "metadata": {},
          "execution_count": 85
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_reviews['points'].value_counts().sort_index().plot.bar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "aSkSwZ8ntGoW",
        "outputId": "29e96c5e-4448-4a62-c54f-d10b46ccbe4a"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7dd82610>"
            ]
          },
          "metadata": {},
          "execution_count": 86
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_reviews.groupby(\"country\").price.mean().sort_values(ascending=False)[:5].plot.bar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "ZDexaf0QtLt4",
        "outputId": "1fe9870f-007b-4f28-953e-a2f25ce4d165"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7e6b2d50>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "objects = ('Python', 'C++', 'Java', 'Perl', 'Scala', 'Lisp')\n",
        "y_pos = np.arange(len(objects))\n",
        "performance = [10,8,6,4,2,1]\n",
        "# Bar Chart\n",
        "# X Axis positions as first parameter list, it can be floating point numbers also\n",
        "# Y Values as 2nd parameter list\n",
        "# Alpha is transparency, \n",
        "# Align can be center or edge\n",
        "# Color can be single value or a list of color codes, one for each bar.\n",
        "plt.bar(y_pos, performance, width=0.5, align='center', alpha=0.5, color=['r', 'r', 'g', 'g', 'b', 'b'])\n",
        "# To define labels for x axis values.\n",
        "plt.xticks(y_pos, objects)\n",
        "plt.ylabel('Usage')\n",
        "plt.xlabel('Programming Languages')\n",
        "plt.title('Programming language usage')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "Cs1kbeVPtQTE",
        "outputId": "dff4105b-2156-477f-ed63-f6912bc8f1e1"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Programming language usage')"
            ]
          },
          "metadata": {},
          "execution_count": 88
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "objects = ('Python', 'C++', 'Java', 'Perl', 'Scala', 'Lisp')\n",
        "y_pos = np.arange(len(objects))\n",
        "performance = [10,8,6,4,2,1]\n",
        "# Bar Chart\n",
        "# X Axis positions as first parameter list, it can be floating point numbers also\n",
        "# Y Values as 2nd parameter list\n",
        "# Alpha is transparency, \n",
        "# Align can be center or edge\n",
        "# Color can be single value or a list of color codes, one for each bar.\n",
        "plt.bar(y_pos, performance, width=0.5, align='center', alpha=0.5, color=['r', 'r', 'g', 'g', 'b', 'b'])\n",
        "# To define labels for x axis values.\n",
        "plt.xticks(y_pos, objects)\n",
        "plt.ylabel('Usage')\n",
        "plt.xlabel('Programming Languages')\n",
        "plt.title('Programming language usage')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "uJJMfZLgtYIb",
        "outputId": "ecb99e11-9373-4563-b61e-a0f6e7ea359c"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Programming language usage')"
            ]
          },
          "metadata": {},
          "execution_count": 89
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the matplotlib library\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Declaring the figure or the plot (y, x) or (width, height)\n",
        "plt.figure(figsize = (12,7))\n",
        "\n",
        "# Categorical data: Country names\n",
        "countries = ['USA', 'Brazil', 'Russia', 'Spain', 'UK', 'India']\n",
        "\n",
        "# Integer value interms of death counts\n",
        "totalDeaths = [112596, 37312, 5971, 27136, 40597, 7449]\n",
        "\n",
        "# Passing the parameters to the bar function, this is the main function which creates the bar plot\n",
        "plt.bar(countries, totalDeaths, width= 0.9, align='center',color='cyan', edgecolor = 'red')\n",
        "\n",
        "# This is the location for the annotated text\n",
        "i = 1.0\n",
        "j = 2000\n",
        "\n",
        "# Annotating the bar plot with the values (total death count)\n",
        "for i in range(len(countries)):\n",
        "    plt.annotate(totalDeaths[i], (-0.1 + i, totalDeaths[i] + j))\n",
        "    \n",
        "# Creating the legend of the bars in the plot\n",
        "plt.legend(labels = ['Total Deaths'])\n",
        "\n",
        "# Giving the tilte for the plot\n",
        "plt.title(\"Bar plot representing the total deaths by top 6 countries due to coronavirus\")\n",
        "\n",
        "# Namimg the x and y axis\n",
        "plt.xlabel('Countries')\n",
        "plt.ylabel('Deaths')\n",
        "\n",
        "# Saving the plot as a 'png'\n",
        "plt.savefig('1BarPlot.png')\n",
        "\n",
        "# Displaying the bar plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "416HFBU0tjee",
        "outputId": "b3dc2647-a00b-42e9-f691-6b8808c12f4d"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "wine_reviews['points'].value_counts().sort_index().plot.barh()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "n92bNZM2tq9g",
        "outputId": "40be6cad-70f0-4661-a2f8-24424e26b540"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7dcef210>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the matplotlib library\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Declaring the figure or the plot (y, x) or (width, height)\n",
        "plt.figure(figsize=[14, 10])\n",
        "\n",
        "# Passing the parameters to the bar function, this is the main function which creates the bar plot\n",
        "# For creating the horizontal make sure that you append 'h' to the bar function name\n",
        "plt.barh(['USA', 'Brazil', 'Russia', 'Spain', 'UK'], [2026493, 710887, 476658, 288797, 287399], label = \"Danger zone\", color = 'r')\n",
        "plt.barh(['India', 'Italy', 'Peru', 'Germany', 'Iran'], [265928, 235278, 199696, 186205, 173832], label = \"Not safe zone\", color = 'g')\n",
        "\n",
        "# Creating the legend of the bars in the plot\n",
        "plt.legend()\n",
        "\n",
        "# Namimg the x and y axis\n",
        "plt.xlabel('Total cases')\n",
        "plt.ylabel('Countries')\n",
        "\n",
        "# Giving the tilte for the plot\n",
        "plt.title('Top ten countries most affected by\\n coronavirus')\n",
        "\n",
        "# Saving the plot as a 'png'\n",
        "plt.savefig('2BarPlot.png')\n",
        "\n",
        "# Displaying the bar plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 637
        },
        "id": "6_PiF6-ytwtd",
        "outputId": "79c7c69e-9e99-440f-e8ee-e4ab057fe730"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1008x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.DataFrame({\n",
        "    'name':['john','mary','peter','jeff','bill','lisa','jose'],\n",
        "    'age':[23,78,22,19,45,33,20],\n",
        "    'gender':['M','F','M','M','M','F','M'],\n",
        "    'state':['california','dc','california','dc','california','texas','texas'],\n",
        "    'num_children':[2,0,0,3,2,1,4],\n",
        "    'num_pets':[5,1,0,5,2,2,3]\n",
        "})\n",
        "# From pandas to plot multiple plots on same figure\n",
        "\n",
        "df.groupby(['state','gender']).size().unstack().plot(kind='bar', stacked=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "id": "cuirvzzHt55K",
        "outputId": "66e8226e-fb7b-463b-c4ee-5d785ad9aafe"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7dabb990>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAErCAYAAADOu3hxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWvElEQVR4nO3df5BdZZ3n8feHJBAEJhmhxwFCTCxiymAChoAgihmUFVCDrjCSLQQGd1OrIrILVeq4pYi7tevq6Kq4UqmBVUdEFhRBwZliBQsFRAiSGAJMRQeLaBZi0EiEQILf/aNvsl1tJ32TnO5Lzn2/qm71Ped57rnfm1v59NPP+ZWqQpK059ur1wVIkpphoEtSSxjoktQSBroktYSBLkktYaBLUktM7NUbH3TQQTVjxoxevb0k7ZGWLVv2m6oaGKmtZ4E+Y8YM7rvvvl69vSTtkZL8cnttTrlIUksY6JLUEga6JLVEz+bQJWk8bd68mTVr1rBp06Zel9KVyZMnM23aNCZNmtT1awx0SX1hzZo1HHDAAcyYMYMkvS5nh6qK9evXs2bNGmbOnNn160adckkyOclPkixP8mCSj4/QZ58k1yZZneSeJDN2qnpJGmObNm3iwAMPfMGHOUASDjzwwJ3+a6KbOfRngZOq6kjgKOCUJMcN6/Nu4LdVdTjwWeCTO1WFJI2DPSHMt9qVWkcN9Bq0sbM4qfMYfhH104GvdJ5fD7whe9K/nCQ16LzzzuP6668f9/ftag49yQRgGXA48MWqumdYl0OBxwCqakuSDcCBwG+GbWcJsARg+vTpu1f5zrp0yvi+33i7dEOvK5C0i7Zs2cLEibu/S7Orwxar6vmqOgqYBhyb5JW78mZVtbSqFlTVgoGBEc9claRx9YlPfILZs2fz2te+lsWLF/PpT3+an//855xyyikcffTRvO51r+Phhx8GBkfeF154Ia95zWt42ctetm0UXlVccMEFzJ49mze+8Y088cQT27a/bNkyXv/613P00Ufzpje9ibVr1wKwcOFCLrroIhYsWMDnPve5Rj7LTv1KqKrfJbkdOAVYOaTpV8BhwJokE4EpwPpGKpSkMXLvvffyzW9+k+XLl7N582bmz5/P0UcfzZIlS7jiiiuYNWsW99xzD+9973u57bbbAFi7di0/+tGPePjhh1m0aBFnnHEGN9xwA4888girVq3i8ccfZ86cOZx//vls3ryZ97///dx4440MDAxw7bXX8pGPfISrrroKgOeee67RS6CMGuhJBoDNnTDfFziZP93peRNwLnA3cAZwW3mzUkkvcHfeeSenn346kydPZvLkybz1rW9l06ZN3HXXXZx55pnb+j377LPbnr/tbW9jr732Ys6cOTz++OMA3HHHHSxevJgJEyZwyCGHcNJJJwHwyCOPsHLlSk4++WQAnn/+eQ4++OBt23rnO9/Z6OfpZoR+MPCVzjz6XsD/rqrvJrkMuK+qbgKuBP4hyWrgSeCsRquUpHHyxz/+kalTp/LAAw+M2L7PPvtsez7auLWqOOKII7j77rtHbN9vv/12vdARdHOUy4qqelVVzauqV1bVZZ31H+2EOVW1qarOrKrDq+rYqvpFo1VK0hg44YQT+M53vsOmTZvYuHEj3/3ud3nRi17EzJkzue6664DBUF6+fPkOt3PiiSdy7bXX8vzzz7N27Vpuv/12AGbPns26deu2BfrmzZt58MEHx+zzeC0XSX3rmGOOYdGiRcybN49TTz2VuXPnMmXKFK6++mquvPJKjjzySI444ghuvPHGHW7n7W9/O7NmzWLOnDmcc845HH/88QDsvffeXH/99Xzwgx/kyCOP5KijjuKuu+4as8+TXk11L1iwoMb1eugetij1tYceeohXvOIVf7J+48aN7L///jz99NOceOKJLF26lPnz5/egwj81Us1JllXVgpH6ey0XSX1tyZIlrFq1ik2bNnHuuee+YMJ8Vxjokvra17/+9V6X0Bjn0CWpJQx0SWoJA12SWsJAl6SWcKeoJI2TCRMmMHfu3G3L3/72t5kxY0Zj2zfQJfWlGR+6udHtPfrf3jxqn3333Xe7lxRoglMuktQSjtAlaZw888wzHHXUUQDMnDmTG264odHtG+iSNE6ccpEkdcVAl6SWMNAlqSWcQ5fUl7o5zLBpGzduHNPtO0KXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSUMdEkaJ0k4++yzty1v2bKFgYEB3vKWtzSyfY9Dl9SfLp3S8PY2jNplv/32Y+XKlTzzzDPsu+++3HrrrRx66KGNlTDqCD3JYUluT7IqyYNJPjBCn4VJNiR5oPP4aGMVSlKLnHbaadx88+C12K+55hoWL17c2La7mXLZAlxcVXOA44D3JZkzQr8fVtVRncdljVUoSS1y1lln8Y1vfINNmzaxYsUKXv3qVze27VEDvarWVtX9nedPAQ8Bzf2NIEl9ZN68eTz66KNcc801nHbaaY1ue6d2iiaZAbwKuGeE5uOTLE/yvSRHNFCbJLXSokWLuOSSSxqdboGd2CmaZH/gm8BFVfX7Yc33Ay+tqo1JTgO+DcwaYRtLgCUA06dP3+WiJWlPdv755zN16lTmzp3LD37wg8a229UIPckkBsP86qr61vD2qvp9VW3sPL8FmJTkoBH6La2qBVW1YGBgYDdLl6Q907Rp07jwwgsb3+6oI/QkAa4EHqqqz2ynz18Cj1dVJTmWwV8U6xutVJKa1MVhhk0b6fK5CxcuZOHChY1sv5splxOAdwE/S7L1Znh/C0wHqKorgDOA9yTZAjwDnFVV1UiFkqSujBroVfUjIKP0uRy4vKmiJEk7z1P/JaklDHRJfWNPmgnelVoNdEl9YfLkyaxfv36PCPWqYv369UyePHmnXufFuST1hWnTprFmzRrWrVvX61K6MnnyZKZNm7ZTrzHQJfWFSZMmMXPmzF6XMaaccpGkljDQJaklDHRJagkDXZJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSUMdElqCQNdklrCQJekljDQJaklDHRJagkDXZJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWGDXQkxyW5PYkq5I8mOQDI/RJks8nWZ1kRZL5Y1OuJGl7JnbRZwtwcVXdn+QAYFmSW6tq1ZA+pwKzOo9XA1/q/JQkjZNRR+hVtbaq7u88fwp4CDh0WLfTga/WoB8DU5Mc3Hi1kqTt6maEvk2SGcCrgHuGNR0KPDZkeU1n3dphr18CLAGYPn36zlWq/nbplF5XMLYu3dDrCsaO39246XqnaJL9gW8CF1XV73flzapqaVUtqKoFAwMDu7IJSdJ2dBXoSSYxGOZXV9W3RujyK+CwIcvTOuskSeOkm6NcAlwJPFRVn9lOt5uAczpHuxwHbKiqtdvpK0kaA93MoZ8AvAv4WZIHOuv+FpgOUFVXALcApwGrgaeBv2m+VEnSjowa6FX1IyCj9CngfU0VJUnaeZ4pKkktYaBLUksY6JLUEga6JLWEgS5JLWGgS1JLGOiS1BIGuiS1hIEuSS1hoEtSSxjoktQSBroktYSBLkktYaBLUksY6JLUEga6JLWEgS5JLWGgS1JLGOiS1BIGuiS1hIEuSS1hoEtSSxjoktQSBroktYSBLkktMWqgJ7kqyRNJVm6nfWGSDUke6Dw+2nyZkqTRTOyiz5eBy4Gv7qDPD6vqLY1UJEnaJaOO0KvqDuDJcahFkrQbmppDPz7J8iTfS3JEQ9uUJO2EbqZcRnM/8NKq2pjkNODbwKyROiZZAiwBmD59egNvLUnaardH6FX1+6ra2Hl+CzApyUHb6bu0qhZU1YKBgYHdfWtJ0hC7HehJ/jJJOs+P7Wxz/e5uV5K0c0adcklyDbAQOCjJGuBjwCSAqroCOAN4T5ItwDPAWVVVY1axJGlEowZ6VS0epf1yBg9rlCT1kGeKSlJLGOiS1BIGuiS1hIEuSS1hoEtSSxjoktQSBroktYSBLkktYaBLUksY6JLUEga6JLWEgS5JLWGgS1JLGOiS1BIGuiS1hIEuSS1hoEtSSxjoktQSBroktYSBLkktYaBLUksY6JLUEga6JLWEgS5JLWGgS1JLGOiS1BKjBnqSq5I8kWTldtqT5PNJVidZkWR+82VKkkbTzQj9y8ApO2g/FZjVeSwBvrT7ZUmSdtaogV5VdwBP7qDL6cBXa9CPgalJDm6qQElSdyY2sI1DgceGLK/prFs7vGOSJQyO4pk+fXoDb61+MWPT13tdwph6tNcFjCG/u/EzrjtFq2ppVS2oqgUDAwPj+daS1HpNBPqvgMOGLE/rrJMkjaMmAv0m4JzO0S7HARuq6k+mWyRJY2vUOfQk1wALgYOSrAE+BkwCqKorgFuA04DVwNPA34xVsZKk7Rs10Ktq8SjtBbyvsYokSbvEM0UlqSUMdElqCQNdklrCQJekljDQJaklDHRJagkDXZJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSUMdElqCQNdklrCQJekljDQJaklDHRJagkDXZJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSW6CvQkpyR5JMnqJB8aof28JOuSPNB5/NvmS5Uk7cjE0TokmQB8ETgZWAPcm+Smqlo1rOu1VXXBGNQoSepCNyP0Y4HVVfWLqnoO+AZw+tiWJUnaWd0E+qHAY0OW13TWDfeOJCuSXJ/ksEaqkyR1ramdot8BZlTVPOBW4CsjdUqyJMl9Se5bt25dQ28tSYLuAv1XwNAR97TOum2qan1VPdtZ/Hvg6JE2VFVLq2pBVS0YGBjYlXolSdvRTaDfC8xKMjPJ3sBZwE1DOyQ5eMjiIuCh5kqUJHVj1KNcqmpLkguAfwImAFdV1YNJLgPuq6qbgAuTLAK2AE8C541hzZKkEYwa6ABVdQtwy7B1Hx3y/MPAh5stTZK0MzxTVJJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSUMdElqCQNdklrCQJekljDQJaklDHRJagkDXZJawkCXpJYw0CWpJQx0SWoJA12SWsJAl6SWMNAlqSUMdElqCQNdklrCQJekljDQJaklDHRJagkDXZJawkCXpJboKtCTnJLkkSSrk3xohPZ9klzbab8nyYymC5Uk7diogZ5kAvBF4FRgDrA4yZxh3d4N/LaqDgc+C3yy6UIlSTvWzQj9WGB1Vf2iqp4DvgGcPqzP6cBXOs+vB96QJM2VKUkazcQu+hwKPDZkeQ3w6u31qaotSTYABwK/GdopyRJgSWdxY5JHdqXoPcRBDPv8Y+rj/v5s2Lh+f/Fv2ia1/bt76fYaugn0xlTVUmDpeL5nryS5r6oW9LoO7Rq/vz1XP3933Uy5/Ao4bMjytM66EfskmQhMAdY3UaAkqTvdBPq9wKwkM5PsDZwF3DSsz03AuZ3nZwC3VVU1V6YkaTSjTrl05sQvAP4JmABcVVUPJrkMuK+qbgKuBP4hyWrgSQZDv9/1xdRSi/n97bn69ruLA2lJagfPFJWkljDQJaklDHRJagkDXZJaYlxPLOoHSd4MHAFM3rquqi7rXUXqRpKZwNqq2tRZ3hd4SVU92tPCNKokJwAPVNUfkpwNzAc+V1W/7HFp484ReoOSXAG8E3g/EOBMdnCarl5QrgP+OGT5+c46vfB9CXg6yZHAxcDPga/2tqTeMNCb9ZqqOofBK09+HDgeeHmPa1J3JnYuPgdA5/nePaxH3dvSOZHxdODyqvoicECPa+oJA71Zz3R+Pp3kEGAzcHAP61H31iVZtHUhyemM58XVtDueSvJh4Gzg5iR7AZN6XFNPOIferO8mmQp8CrgfKODve1uSuvTvgauTXN5ZXgO8q4f1qHvvBP4N8O6q+r9JpjP4f7DveKboGEmyDzC5qjb0uhZtX5L/OGzVizo/nwaoqs+Mb0XSrnOE3oAkJ1XVbUn+9QhtVNW3elGXurJ1rnU2cAxwI4M7tM8BftKrotS9JMcBXwBeweB+jwnAxqqa0tPCesBAb8brgduAt47QVoCB/gLV2XlNkjuA+VX1VGf5UuDmHpam7l3O4AUBrwMWMPjLuC8PRnDKRQI6d8+aV1XPdpb3AVZU1ezeVqbRbL2hRZIVVTWvs+6nVfWqXtc23hyhN6gTAu8AZjDk39YTi/YIXwV+kuSGzvLbgC/3rhzthKc792p4IMl/B9bSp0fwOUJvUJJ/BDYAyxg8MQWAqvq7nhWlriWZD7yus3hHVf20l/WoO0leCjzO4Pz5f2Dwjmn/s6pW97SwHjDQG5RkZVW9std1SP0kyV9U1RPD1s2uqjbfhH5EfflnyRi6K8ncXhch9ZkfJvnrrQtJLgZu2EH/1nKE3qAkq4DDgX8BnmXw8LfauqNGUvOSHMzgbec2AS8BHgIurqqNPS2sB9wp2pAkYfBsw767wpvUS1W1trP/6sMMXmDtQ/0Y5uAIvVFJflZVTrlI4yjJ/wF+DVwIHMbgTevvqKpLelpYDziH3qz7kxzT6yKkPnN5VZ1TVb+rqp8xeJXTvrzkhiP0BiV5mME59F8Cf8A5dGlcJHktMKuq/leSg4ADqupfel3XeDPQG9Q5HvZP9OOdU6TxkuRjDJ7yP7uqXt65dPV1VXVCj0sbd065NKgT3FMZvKbLW4Gphrk05t4OLGLwr2Kq6td4gwvtriQfAK4G/qLz+FqS9/e2Kqn1nuvcsagAkuzX43p6ximXBiVZARxfVX/oLO8H3O0cujR2klwCzAJOBv4rcD7w9ar6Qk8L6wGPQ29WGHINl87z9KgWqV8MANcDv2fwuvYfBd7Y04p6xBF6gzp3vzmX/3/a8duAL1fV/+hdVVK7Jbm/quYPW7eiH/8yNtAbkGTm1kOkOlfse22n6YdesU8aG0neA7wXeBnw8yFNBwB3VtXZPSmshwz0BiRZVlVHJ/l+Vb2h1/VI/SDJFODPGZw3/9CQpqeq6sneVNVbBnoDkvyUwdtfvQf47PB2bzQsaTx42GIzzmJwB+hEBv/cG/6QpDHnCL1BSU6tqu/1ug5J/cnDFhuQ5Oyq+howJ8krhrc75SJpPBjozdh6Ztr+Pa1CUl9zykWSWsIRegOSfH5H7VV14XjVIql/GejNWNbrAiTJKRdJaglH6A1KMgB8EJgDTN66vqpO6llRkvqGJxY162rgIWAm8HHgUeDeXhYkqX845dKgIdd02XaltyT3VpU3jpY05pxyadbmzs+1Sd4M/Bp4cQ/rkdRHDPRm/efOFeAuBr4A/BlwUW9LktQvnENv1pkMTmOtrKq/YvCWWG/vcU2S+oSB3qx5VfW7rQudazK/qof1SOojBnqz9kry51sXkrwYp7UkjRPDpll/B9yd5LrO8pnAf+lhPZL6iIctNizJHGDriUS3VdWqXtYjqX8Y6JLUEs6hS1JLGOiS1BIGuvpWkouSvKipflKvOYeuvpXkUWBBVf2miX5SrzlCV19Isl+Sm5MsT7IyyceAQ4Dbk9ze6fOlJPcleTDJxzvrLhyh379KcneS+5Ncl8R7yeoFwRG6+kKSdwCnVNW/6yxPAZYzZOSd5MVV9WSSCcD3gQurasXQEXqSg4BvAadW1R+SfBDYp6ou68XnkoZyhK5+8TPg5CSfTPK6qtowQp+/TnI/8FPgCAZvVDLccZ31dyZ5ADgXeOlYFS3tDM8UVV+oqn9OMh84jcGrYn5/aHuSmcAlwDFV9dskX2bIXaeGdgVurarFY12ztLMcoasvJDkEeLqqvgZ8CpgPPAUc0OnyZ8AfgA1JXgKcOuTlQ/v9GDghyeGd7e6X5OXj8BGkUTlCV7+YC3wqyR8ZvBHJe4DjgX9M8uuq+qskPwUeBh4D7hzy2qXD+p0HXJNkn077fwL+ebw+iLQ97hSVpJZwykWSWsJAl6SWMNAlqSUMdElqCQNdklrCQJekljDQJaklDHRJaon/ByoOdLbxe0OyAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(['gender','state']).size().unstack().plot(kind='bar',stacked=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "jgIJs2zzuBLk",
        "outputId": "ecef92c9-4e0d-46a6-848f-5ebcd8af3578"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7d9f57d0>"
            ]
          },
          "metadata": {},
          "execution_count": 94
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the matplotlib library\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Declaring the figure or the plot (y, x) or (width, height)\n",
        "plt.figure(figsize=[15, 5])\n",
        "\n",
        "# Categorical data: Country names\n",
        "countries = ['USA', 'Brazil', 'Russia', 'Spain', 'UK', 'India']\n",
        "\n",
        "# Integer value interms of total cases\n",
        "totalCases = (2026493, 710887, 476658, 288797, 287399, 265928)\n",
        "\n",
        "# Integer value interms of death counts\n",
        "totalDeaths = (113055, 37312, 5971, 27136, 40597, 7473)\n",
        "\n",
        "# Plotting both the total death and the total cases in a single plot. Formula total cases - total deaths\n",
        "for i in range(len(countries)):    \n",
        "    plt.bar(countries[i], totalDeaths[i], bottom = totalCases[i] -  totalDeaths[i], color='black')\n",
        "    plt.bar(countries[i], totalCases[i] - totalDeaths[i], color='red')\n",
        "    \n",
        "# Creating the legend of the bars in the plot\n",
        "plt.legend(labels = ['Total Deaths','Total Cases'])\n",
        "\n",
        "# Giving the tilte for the plot\n",
        "plt.title(\"Bar plot representing the total deaths and total cases country wise\")\n",
        "\n",
        "# Namimg the x and y axis\n",
        "plt.xlabel('Countries')\n",
        "plt.ylabel('Cases')\n",
        "\n",
        "# Saving the plot as a 'png'\n",
        "plt.savefig('3BarPlot.png')\n",
        "\n",
        "# Displaying the bar plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "XUnWq4gCuI5F",
        "outputId": "55d4d376-80f3-475f-b3cb-e2c018a2c511"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "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yWtgyfC0ndrJ36Lp7aMdNrQ1zZ3NJGmN0w5JfWk7HG0Tmp6uMyc6Lknj4q3AxSZ90pqrc4lfktNphiQ8L82PLR8GvAE4LM2Pm15OM+wAmmEhC9P8WO25wPvaIRmStCYKzVCzO2mGel5JM2RQ0mosyfU0v6P5ngkORdIE6uRQT0mSJEnSYzrX4ydJkiRJWpqJnyRJkiR13OSJDmA8bbTRRrXFFltMdBiSJEmSNCHmzJlze1VNG1reqcRviy22YPbs2RMdhiRJkiRNiCS/G67coZ6SJEmS1HEmfpIkSZLUcSZ+kiRJktRxnbrGT5IkSVL/PfLIIyxYsICHHnpookNZY02dOpVNN92UtdZaa1T1TfwkSZIkjcmCBQtYb7312GKLLUgy0eGscaqKhQsXsmDBArbccstRzeNQT0mSJElj8tBDD7Hhhhua9E2QJGy44YZj6nE18ZMkSZI0ZiZ9E2us29/ET5IkSdJqZeHChcyYMYMZM2bwrGc9i0022WTJ6z/84Q9L1T3hhBN44IEHltvm3nvvPexvgu+9994873nPY8cdd2SbbbbhiCOO4K677lrh2IfGs+66665wW2Nh4idJkiTpCUkyro/l2XDDDZk7dy5z587l8MMP513veteS12uvvfZSdUeb+C3Ll7/8ZebNm8e8efOYMmUKBx100Aq3NR7xrAgTP0mSJEmrvXPOOYeZM2eyww478KY3vYmHH36YE088kd///vfss88+7LPPPgC89a1vZWBggO23356jjjpqTMtYe+21+fjHP84NN9zAJZdcAsCXvvQldt11V2bMmMFb3vIWFi9ePOJyhosH4IMf/CA77bQTu+22G7fccgsAX//613n+85/PTjvtxJ577vmEt4+JnyRJkqTV2kMPPcShhx7K1772NS699FIWLVrEySefzNvf/nY23nhjzj33XM4991wAjj32WGbPns28efM4//zzmTdv3piWNWnSJHbaaSeuuuoqrrzySr72ta9x4YUXMnfuXCZNmsSXv/zlEZczXDz3338/u+22G5dccgl77rknp556KgDHHHMMZ599NpdccglnnXXWE95GfUv8kmyW5NwkVyS5PMk7hqmTJCcmmZ9kXpKde6YdkuS37eOQfsW5Mox317eP8X9IkiRp9bV48WK23HJLtt56awAOOeQQLrjggmHrnnHGGey8887MnDmTyy+/nCuuuGLMy6sqoOllnDNnDrvssgszZszgnHPO4dprrx3TctZee21e/vKXA/CCF7yA66+/HoDdd9+dQw89lFNPPXVJL+IT0c/f8VsEvKeqfpVkPWBOkh9WVe8avwTYqn28EDgZeGGSpwNHAQNAtfOeVVV39jFeSZIkSR123XXXcdxxx3HxxRezwQYbcOihh475R+gXL17MpZdeyrbbbsutt97KIYccwkc/+tEVXs5aa621pCNi0qRJLFq0CIBTTjmFX/ziF3znO9/hBS94AXPmzGHDDTdcgbVu9K3Hr6purqpftc/vBa4ENhlS7SDgC9W4CHhakmcDBwA/rKo72mTvh8CB/YpVkiRJ0upr0qRJXH/99cyfPx+AL37xi+y1114ArLfeetx7770A3HPPPayzzjqsv/763HLLLXzve98b03IeeeQRPvCBD7DZZpux4447su+++/KNb3yDW2+9FYA77riD3/3ud8tcTm88y3LNNdfwwhe+kGOOOYZp06Zx4403jinWofrZ47dEki2AmcAvhkzaBOhdgwVt2Ujlw7U9C5gFMH369HGJV5IkSdLqY+rUqXz2s5/lNa95DYsWLWKXXXbh8MMPB2DWrFkceOCBS66tmzlzJttssw2bbbYZu++++6jaf8Mb3sCUKVN4+OGH2W+//fif//kfALbbbjs+8pGPsP/++/Poo4+y1lprcdJJJ7HbbruNuJyh8Yzkfe97H7/97W+pKvbdd1922mmnJ7CFIIPjU/slybrA+cCxVfXNIdO+DXysqn7avj4HeD+wNzC1qj7Sln8IeLCqjlvWsgYGBmq4396YaF5Dturr93kgSZLUJVdeeSXbbrvtRIexxhtuPySZU1UDQ+v29a6eSdYC/hv48tCkr3UTsFnP603bspHKJUmSJElj1M+7egb4L+DKqvrECNXOAv46jd2Au6vqZuBsYP8kGyTZANi/LZMkSZIkjVE/r/HbHfgr4NIkc9uyfwCmA1TVKcB3gZcC84EHgL9pp92R5MPAxe18x1TVHX2MVZIkSZI6q2+JX3vd3jIvbqvmwqq3jTDtNOC0PoQmSZIkSWuUvl7jJ0mSJEmaeCZ+kiRJktRxJn6SJEmSVisLFy5kxowZzJgxg2c961lssskmS17/4Q9/WKruCSecwAMPPLDcNvfee2+G+2m4Rx55hCOPPJKtttqKnXfemRe96EVj/uH3VcFK+QF3SZIkSR023r9bvZzfWN5www2ZO7e5f+TRRx/Nuuuuy3vf+95h655wwgm88Y1v5ClPecoKhfKhD32Im2++mcsuu4wpU6Zwyy23cP75569QWxPJHj9JkiRJq71zzjmHmTNnssMOO/CmN72Jhx9+mBNPPJHf//737LPPPuyzzz4AvPWtb2VgYIDtt9+eo446apltPvDAA5x66ql88pOfZMqUKQA885nP5LWvfe0y2zryyCPZbrvt2HHHHZckpLfddhuvetWr2GWXXdhll1248MILATj//POX9FbOnDmTe++9d9y3Ddjjt1Is+/sKSZIkSU/EQw89xKGHHso555zD1ltvzV//9V9z8skn8853vpNPfOITnHvuuWy00UYAHHvssTz96U9n8eLF7LvvvsybN48dd9xx2Hbnz5/P9OnTeepTnzrs9OHa2mSTTTjzzDO56qqrSMJdd90FwDve8Q7e9a53sccee3DDDTdwwAEHcOWVV3Lcccdx0kknsfvuu3PfffcxderUvmwje/wkSZIkrdYWL17MlltuydZbbw3AIYccwgUXXDBs3TPOOIOdd96ZmTNncvnll3PFFVes8HKHa2v99ddn6tSpHHbYYXzzm99cMsT0Rz/6EUcccQQzZszgla98Jffccw/33Xcfu+++O+9+97s58cQTueuuu5g8uT99cyZ+kiRJktYI1113HccddxznnHMO8+bN42UvexkPPfTQiPWf+9zncsMNN3DPPfeMuq3Jkyfzy1/+kle/+tV8+9vf5sADDwTg0Ucf5aKLLmLu3LnMnTuXm266iXXXXZcjjzySz3zmMzz44IPsvvvuXHXVVX1ZdxM/SZIkSau1SZMmcf311zN//nwAvvjFL7LXXnsBsN566y25bu6ee+5hnXXWYf311+eWW25Z7t05n/KUp3DYYYfxjne8Y8ndQm+77Ta+/vWvj9jWfffdx913381LX/pSjj/+eC655BIA9t9/fz75yU8uaXvw5jTXXHMNO+ywA+9///vZZZdd+pb4eY2fJEmSpNXa1KlT+exnP8trXvMaFi1axC677MLhhx8OwKxZszjwwAPZeOONOffcc5k5cybbbLMNm222Gbvvvvty2/7IRz7CP/7jP7LddtsxdepU1llnHY455hh22mmnYdu69957Oeigg3jooYeoKj7xiU8AcOKJJ/K2t72N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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "Data = {'Country': ['USA','Canada','Germany','UK','France'],\n",
        "        'GDP_Per_Capita': [45000,42000,52000,49000,47000],\n",
        "        'Income_Per_Capita': [4000,5000,7000,55000,60000]\n",
        "       }\n",
        "\n",
        "  \n",
        "df = pd.DataFrame(Data)\n",
        "# Multiple metrics in same chart\n",
        "df.plot(x ='Country', y=['GDP_Per_Capita', 'Income_Per_Capita'], kind = 'bar')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "pNnjTTUsuPtL",
        "outputId": "8d7a6e52-fbad-4733-a0ef-f6f84783de3f"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7d990810>"
            ]
          },
          "metadata": {},
          "execution_count": 96
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing the matplotlib library\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Declaring the figure or the plot (y, x) or (width, height)\n",
        "plt.figure(figsize=[15, 10])\n",
        "\n",
        "# Data to be plotted\n",
        "totalDeath = [113055, 37312, 5971, 7473, 33964]\n",
        "totalRecovery = [773480, 325602, 230688, 129095, 166584]\n",
        "activeCases = [1139958, 347973, 239999, 129360, 34730]\n",
        "country = ['USA', 'Brazil', 'Russia', 'India', 'Italy']\n",
        "\n",
        "# Using numpy to group 3 different data with bars\n",
        "X = np.arange(len(totalDeath))\n",
        "\n",
        "# Passing the parameters to the bar function, this is the main function which creates the bar plot\n",
        "# Using X now to align the bars side by side\n",
        "plt.bar(X, totalDeath, color = 'black', width = 0.25)\n",
        "plt.bar(X + 0.25, totalRecovery, color = 'g', width = 0.25)\n",
        "plt.bar(X + 0.5, activeCases, color = 'b', width = 0.25)\n",
        "\n",
        "# Creating the legend of the bars in the plot\n",
        "plt.legend(['Total Deaths', 'Total Recovery', 'Active Cases'])\n",
        "\n",
        "# Overiding the x axis with the country names\n",
        "plt.xticks([i + 0.25 for i in range(5)], country)\n",
        "\n",
        "# Giving the tilte for the plot\n",
        "plt.title(\"Bar plot representing the total deaths, total recovered cases and active cases country wise\")\n",
        "\n",
        "# Namimg the x and y axis\n",
        "plt.xlabel('Countries')\n",
        "plt.ylabel('Cases')\n",
        "\n",
        "# Saving the plot as a 'png'\n",
        "plt.savefig('4BarPlot.png')\n",
        "\n",
        "# Displaying the bar plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "MIbG_dWBuVM1",
        "outputId": "7876b8c8-18ac-40cf-fdf3-b40060759c2c"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Frame plotting\n",
        "from pandas import DataFrame\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "Data = {'Tasks': [300,500,700],\n",
        "       'Task Type' : ['Tasks Pending','Tasks Ongoing','Tasks Completed']\n",
        "       }\n",
        "\n",
        "df = DataFrame(Data)\n",
        "df.set_index('Task Type', inplace=True)\n",
        "\n",
        "# autopct has extra % at the end as escape, as % is interpreted as formatting string begin by default.\n",
        "# Only pie chart needs labels to be data frame index\n",
        "df.plot.pie(y='Tasks', figsize=(10,10),autopct='%1.1f%%', startangle=90)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 592
        },
        "id": "zoaHxtxuudZR",
        "outputId": "391106bb-66e5-4462-efec-022a81685e25"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7d80abd0>"
            ]
          },
          "metadata": {},
          "execution_count": 98
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "# if using a Jupyter notebook, include:\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n",
        "labels = ['Civil', 'Electrical', 'Mechanical', 'Chemical']\n",
        "sizes = [15, 50, 45, 10]\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.pie(sizes, labels=labels, autopct='%1.1f%%')\n",
        "ax.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n",
        "ax.set_title('Engineering Diciplines')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "iYI7Ub3uujie",
        "outputId": "6b7e12eb-bb8f-49af-ec5a-49d2ac81db8c"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "# if using a Jupyter notebook, include:\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "# Pie chart, where the slices will be ordered and plotted counter-clockwise\n",
        "labels = ['Civil', 'Electrical', 'Mechanical', 'Chemical']\n",
        "sizes = [15, 30, 45, 10]\n",
        "\n",
        "# Explode out the 'Chemical' pie piece by offsetting it a greater amount\n",
        "explode = (0.1, 0.1, 0.1, 0.4)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.pie(sizes,\n",
        "       explode=explode,\n",
        "       labels=labels,\n",
        "       autopct='%1.1f%%',\n",
        "       shadow=True,\n",
        "       startangle=90)\n",
        "ax.axis('equal')  # Equal aspect ratio ensures the pie chart is circular.\n",
        "ax.set_title('Engineering Diciplines')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "id": "rexFFCGeuo2O",
        "outputId": "3d8933ea-3cde-442a-cfa2-9cfba30aa2c6"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20,10))\n",
        "plt.subplot(2,2,1)\n",
        "plt.bar(range(1,6), np.random.randint(1,20,5))\n",
        "plt.title(\"2,2,1\")\n",
        "plt.subplot(2,2,2)\n",
        "plt.bar(range(1,6), np.random.randint(1,20,5))\n",
        "plt.title(\"2,2,2\")\n",
        "plt.subplot(2,2,3)\n",
        "# s is the size of dot\n",
        "plt.scatter(range(1,6), np.random.randint(1,20,5), s=100, color=\"r\")\n",
        "plt.title(\"2,2,3\")\n",
        "plt.subplot(2,2,4)\n",
        "plt.plot(range(1,6), np.random.randint(1,20,5), marker='o', color='g', linestyle='--')\n",
        "plt.title(\"2,2,4\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "id": "kjBM6GRRvCHj",
        "outputId": "50931be2-e349-492b-c063-ec2a95419db4"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, '2,2,4')"
            ]
          },
          "metadata": {},
          "execution_count": 101
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 4 Axes>"
            ],
            "image/png": "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wPq5/tbr12n9eFD8AAAA9LGPXPyRJMnfPutvJ/S4r937tTnz0DOz0bSNcusfbs397f4JPT4MutZaNttos1Vu22mLnSYsh+IHAACgj713v/fm7JefPaH/UHxAVeW2u2/L0055Wo795rFprU14BhhEy+5bliO/emRuu/u2TKsH35drkw02yQcO+MCEZVH8AAAA9KnWWjbfaPPMetyszjJstuFmmfXYWfn4JR/P339n/O8xBMPgc1d8LqdfeXo+sP8HcuqLTs3OW+ycSmXnLXbO3OfPzSv/9JUTlmX8bgcPAADAevvpzT/NYV88LKe96LTsvd3eneWoqvzzc/85t919W97/3fdni423yF8/7a87ywP9rLWWqspRex+VXR+5a56187OSJK98wsQVPStb6xk/VXVKVS2pqoUrrNuqquZX1c9GPm85vjEBAAAml3df+O5c+9trs/3m23cdJVWVTx/86bzs8S/LO+a/I/OunLhHUcOguHrJ1dnnpH1y7W+vTVX9sfTp2mgu9To1ycrnFR6X5NuttV2TfHvkNQAAAD2wcMnCnLnwzLz5yW/ONptu03WcJMnUKVPz2Rd/Nsc++dgc8JgDuo4DfeXCRRfmGf/3GVl82+LcdvdtXcd5kLUWP621i5LcstLqFyY5bWT5tCQv6nEuAACASeuEC07IZhtt1neXVG04dcN8dNZH86iHPyr33n9vLv3VpV1Hgs594eov5LmnPzePevijcvHRF2evR+3VdaQHWd+bO2/bWrtxZPnXSbZd3cCqmlNVC6pqwdKlS9fzcAAAAJPD5b++PF+55it561Pemq0etlXXcVbrhO+ckGf832fkgkUXdB0FOvPVn3w1L/vSy/Lnj/7zfP+o72fGI2Z0HekhxvxUr7b8eX6rfaZfa21ua21ma23m9OnTx3o4AACAobbnNnvmtBedlrc+5a1dR1mjtz31bXnMlo/J8894fi654ZKu40AnnvOY5+T4Zx6f+UfM79uidn2Ln5uqarskGfm8pHeRAAAAJq9pU6blyCcemS023qLrKGv0yE0emflHzM82m26TWafPysIlC9f+RTAE/nDvH3L8t4/P7Xffnk033DTv3//9edgGD+s61mqtb/HztSSvHll+dZKzexMHAABg8nrlV16Zky47qesYo/bozR6dbx3xrTxsg4flkDMPyb3339t1JBhXv/39b/O8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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(range(1,6), np.random.randint(1,20,5), width=0.5)\n",
        "plt.scatter(range(1,6), np.random.randint(1,20,5), s=200, color=\"r\")\n",
        "plt.plot(range(1,6), np.random.randint(1,20,5), marker='o', color='g', linestyle='--')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "1jYE_Y2svIzL",
        "outputId": "7708082d-eb86-4cfd-a3fc-d8e1a2a782ff"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ffa7d8fd510>]"
            ]
          },
          "metadata": {},
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import os"
      ],
      "metadata": {
        "id": "prHny986vWu1"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data.dropna(axis=0,inplace=True)\n",
        "cars_data.size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a5H1v6RPv7Kg",
        "outputId": "b72fe241-4631-455d-cb00-6df1d21e7144"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11110"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data=pd.read_csv('Toyota.csv')\n",
        "cars_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "kbYO1EGKwBVw",
        "outputId": "94b9451b-d363-471a-8441-0075e1c45496"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  Price   Age     KM FuelType  HP  MetColor  Automatic    CC  \\\n",
              "0           0  13500  23.0  46986   Diesel  90       1.0          0  2000   \n",
              "1           1  13750  23.0  72937   Diesel  90       1.0          0  2000   \n",
              "2           2  13950  24.0  41711   Diesel  90       NaN          0  2000   \n",
              "3           3  14950  26.0  48000   Diesel  90       0.0          0  2000   \n",
              "4           4  13750  30.0  38500   Diesel  90       0.0          0  2000   \n",
              "\n",
              "   Doors  Weight  \n",
              "0  three    1165  \n",
              "1      3    1165  \n",
              "2      3    1165  \n",
              "3      3    1165  \n",
              "4      3    1170  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8c1a5cb-ab49-4f9e-b60e-9f9fe5928140\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>KM</th>\n",
              "      <th>FuelType</th>\n",
              "      <th>HP</th>\n",
              "      <th>MetColor</th>\n",
              "      <th>Automatic</th>\n",
              "      <th>CC</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>13500</td>\n",
              "      <td>23.0</td>\n",
              "      <td>46986</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>three</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>13750</td>\n",
              "      <td>23.0</td>\n",
              "      <td>72937</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>13950</td>\n",
              "      <td>24.0</td>\n",
              "      <td>41711</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>14950</td>\n",
              "      <td>26.0</td>\n",
              "      <td>48000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>13750</td>\n",
              "      <td>30.0</td>\n",
              "      <td>38500</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8c1a5cb-ab49-4f9e-b60e-9f9fe5928140')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c8c1a5cb-ab49-4f9e-b60e-9f9fe5928140 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c8c1a5cb-ab49-4f9e-b60e-9f9fe5928140');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set(style=\"darkgrid\")\n",
        "sns.regplot(x=cars_data['Age'],y=cars_data['Price'])\n",
        "\n",
        "#It estimates and plots a regression model relating the x and y variables\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "ab-8xctcwZ3T",
        "outputId": "d199d0f0-2423-42a1-adc4-90e5a39fcb94"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa712d4d10>"
            ]
          },
          "metadata": {},
          "execution_count": 110
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Scatter plot of Price vs Age without the regression fit line\n",
        "sns.regplot(x=cars_data['Age'],y=cars_data['Price'],fit_reg=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "MMtmzvWUwgS5",
        "outputId": "6e885054-8000-4766-9203-a9acd26047cd"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa71429550>"
            ]
          },
          "metadata": {},
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Scatter plot of Price vs Age by customizing the appearance of markers\n",
        "sns.regplot(x=cars_data['Age'], y=cars_data['Price'], marker=\"*\", fit_reg=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "ib_dF_g1wll5",
        "outputId": "110f22b1-af3d-4bc2-f596-701c3022f3f5"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa711d6b90>"
            ]
          },
          "metadata": {},
          "execution_count": 112
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter plot of Price vs Age by FuelType\n",
        "\n",
        "#Using hue parameter, including another variable to show the fuel types categories with different colors\n",
        "\n",
        "sns.lmplot(x='Age', y='Price', data=cars_data, fit_reg=False, hue='FuelType', legend=True, palette=\"Set1\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "wsQ3kbrswqyc",
        "outputId": "1d37dcfe-a202-4a09-c8b0-dbcd5796b0b1"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7ffa711b6d50>"
            ]
          },
          "metadata": {},
          "execution_count": 113
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 433.85x360 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZ4AAAFcCAYAAAD4XNiwAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXxdVbn4/8/ae58pc5qkbZpOwG0ZrFBKgEulgFVBhVKoIgVR8CKW4le4ClwEZZAWCghe1MtMf5feq1ZFiwVlEgtYqFCg9kJlVOxAmrZJm6HJGffe6/fHzjk5J+PJdJI0z/v1gjR777OHpD3PWWs961lKa60RQgghcsQY7hsQQggxtkjgEUIIkVMSeIQQQuSUBB4hhBA5JYFHCCFETkngEUIIkVPWcN/ASLV3bwuu232meWlpHg0N4Rze0fCTZx4bxuIzQ9+fu6KicAjv5sAmLZ5+sixzuG8h5+SZx4ax+Mwwdp97OEjgEUIIkVMSeIQQQuSUBB4hhBA5JYFHCCFETkngEUIIkVMSeIQQQuSUBB4hhBA5JYFHCCFETknlgiHmvLQed9VKdE0NqqoK48KLMU+cN9y3JYQQw0ZaPEPIeWk9zopl6Pp6KC5G19fjrFiG89L64b41IYQYNhJ4hpC7aiX4/ahQCKUUKhQCv9/bLoQQY5R0tQ0hXVMDhoHevQsSCfD5YFyZt10IIcYoafEMpfwCqN0Jtg2m6X2t3eltF0KIMUoCz5DSoFTbH9uWWFDK2y6EEGOUBJ6h1NoKEyvB8oHrel8nVnrbhRBijJIxniGkqqrQ9fWo6dNT23QkgiovH7Z7EkKI4SYtniFkXHgxxOPoSAStNToSgXjc2y6EEGOUBJ4hZJ44D/Pa670WTlMTqrwc89rrZQKpEGJMk662IWaeOE8CjRBCpJEWjxBCiJySwCOEECKnchZ4LrvsMs4880zOOusszj//fN555x0A/vnPf3Luuedy2mmnce6557J169bUa4ZinxBCiOGVs8Bz++238/jjj/O73/2Of/u3f+O6664D4MYbb+T888/nmWee4fzzz+eGG25IvWYo9gkhhBheOQs8hYWFqT+3tLSglGLv3r28/fbbnHHGGQCcccYZvP322+zbt29I9gkhhBh+Oc1q+973vsfLL7+M1pqHH36Y2tpaJkyYgGmaAJimyfjx46mtrUVrPej7xo0bl/W9lpX1Xk+toqKw12MONPLMY8NYfGYYu8+dazkNPLfccgsAv/vd77jjjju44oorcnn5Ptm7twXX7b6mWkVFIXV1+3N4R8NPnnlsGIvPDH1/bglS/TcsWW1nnXUWr776KhMnTmT37t04jgOA4zjs2bOHyspKKisrB32fEEKI4ZeTwNPa2kptbW3q+3Xr1lFcXExZWRmHH344v//97wH4/e9/z+GHH864ceOGZJ8QQojhp7TWQ16jv76+nssuu4xIJIJhGBQXF3PNNdfwsY99jH/84x9897vfpbm5maKiIm6//XYOPvhggCHZly3pautMnnlsGIvPDNLVlks5CTyjkQSezuSZx4ax+MwggSeXpHKBEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInJLAI4QQIqck8AghhMgpCTxCCCFySgKPEEKInLJycZGGhgb+4z/+g+3bt+P3+5k2bRo333wz48aN49BDD2XmzJkYhhcD77jjDg499FAA1q1bxx133IHjOHzsYx9jxYoVhEKhAe0b6ZyX1uOuWomuqUFVVWFceDHmifOG+7aEEGLQ5KTFo5Ti61//Os888wxPPPEEU6ZM4c4770zt/+Uvf8natWtZu3ZtKui0trZy/fXXc//99/PHP/6R/Px8Vq5cOaB9I53z0nqca69Gv/4a7KxBv/4azrVX47y0frhvTQghBk1OAk9JSQnHH3986vvZs2ezc+fOHl/z5z//mVmzZjF9+nQAFi9ezFNPPTWgfSOdc+vNsL8ZtAalvK/7m73tQghxgMhJV1s613VZvXo18+fPT237yle+guM4nHTSSXzrW9/C7/dTW1vLpEmTUsdMmjSJ2tpagH7v64uysoJej6moKOzzeXtSU9sWjJVq/6o11O4c9Gv110i5j1ySZx47xupz51rOA8+yZcvIy8vjggsuAOCFF16gsrKSlpYWrr76au655x6+/e1v5/q2Otm7twXX1d3ur6gopK5u/+BeVHdzPa0H/1r9MCTPPMLJM48dfX1uCVL9l9Ostttvv51t27Zx9913p5IJKisrASgoKOCcc85h06ZNqe3p3XE7d+5MHdvffSNeMOh91br9v/TtWXh9WwPXPbaFi1e9wXWPbeH1bQ1DcKNCCNF/OQs8P/rRj9iyZQv33HMPfr8fgKamJqLRKAC2bfPMM89w+OGHAzBv3jzeeusttm7dCngJCJ/73OcGtG+kU1+7xOteS+9qU8rbnoXXtzXwwIsf0tAapzBg0tAa54EXP5TgI4QYUXLS1fbBBx/wwAMPMH36dBYvXgzA5MmT+frXv84NN9yAUgrbtjn66KO54oorAK8FdPPNN7NkyRJc1+Xwww/ne9/73oD2jXS+JUtJAPpnj0A4DHl5qAsuwrdkaVavX7OpBstQBH0mAEGfSTThsGZTDdXTSofuxoUQog+U1t0NLIxtwzLGM0AXr3qDwoCJSraYAK01LTGHhy88ZsDnH4nPPNTkmccOGePJHalccACZUBQgZrsZ22K2y/iiwDDdkRBCdCaB5wCyaE4VtquJJhy09r7armbRnKrhvjUhhEjJeTq1GDrV00rh5INZs6mGPc0xxhcFWDSnql/jO69va2DNphp2N8eY0Haez0nXghBiEEjgOcBUTysdcCJBMjvOMlRGdlxxUYgZpdmndgshRFck8IwwXbU0cp2R1l123M83bOWm0w/L6b0IIQ48MsYzgoyUeTi7m2MErMy/GgHLYGdDJKf3IYQ4MEngGUHSWxpKeV8tQ7FmU01O76O77LhJpaNjaQkhxMgmgWcE6a6lsac5ltP76C477stzp+f0PoQQByYJPCPISJmHUz2tlCUnH0xpvp+WmENpvp8lJx/M3JkVOb0PIcSBSZILRpBFc6p44MUPiSYcApZBzHaHbR7OYGTHCSFEV6TFM4J019KQACCEOJBIi2eEyaal4by0HnfVSnRNDaqqCuPCizFPnJejOxRCiIGRFs8I4Ly0nsQlFxH//GdIXHIRzkvrezzWWbEMXV8PxcXo+nqcFct6fI0QQowkEniGWV8DibtqJfj9qFAIpRQqFAK/39suhBCjgHS1DbP0QAJAKIRu295V95muqYHi4syNwaC3/QA0Eio5CCEGl7R4hpmuqem8tHUPgURVVUHbqq0p0ai3/QAzUio5CCEGl7R4hknqk/ynrmR86z7O2rWJOY3bvJ09BBLjwou9rjnwAlY0CvE4xoUX5+zec6WnFVWT+6UlJMToIy2eYZD+Sb6guJAGfz4PTf8kbxRPRUciPQYS88R5mNdejyovh6YmVHk55rXXH5BZbd1VctixLyItISFGMWnxDIOMT/K+AoIKog2NrJ1wNMfYe3tNjzZPnHdABpqOJhQFaGiNp1o84FVySDguBQGzy5aQtHqEGPkk8AyD3c0xCgPtb6aqoIBgfj51sYn4brpgGO+sa8l5Q7t21eJOrEwFxqGeT9RdJQfLUCOipp0Qon+kq20YjJSabNlIT/dWJe3p3okH7hvy+UTdVXKYWpY3an5+QojOpMUzDEZSTbbedDVvSAP6Z49AeUXWaeA96SllurtKDqPl5yeE6EwCzzConlYKJx/Mmk017GmOMT7tzXb1xu2s3VxLJOEQ8pksnF3JecdNzfk9prrRNr0Bfj+6vAJK2+YPBYMQDvcpDbyjZLDZsS9COG5TGLAoyfOlEgXookZdeoDK85torWmJORk/PyHEyCeBZ5h09Ul+9cbt/Oq1j0CBZSiituN9DzkNPsnuNfx+CAQgHoddtbiWAaF8L4U7L8/7GkpbHC7L+UTJrD7LUEQTNo7WNEVt/JZBfsDqMlEg/TWFATPVyrn0FCmiKsRoI4FnBFm7ubYt6HhDb5ZS2K7L2s21WQeebGb693ZMeveaLiuHXbWgNc7uPTBhIsTjqAsuQj/+WL/mE6Vn9dmu97yu1jRGEuQHrC4TBXqa0yOBR4jRRQLPCBJJOFiGythmKkUk4WT1+o6tgq66rbI5Jr0sjyos9ILL3nqIxVDl5e1ZbR+b1a+stvSsPp+psF2NAhKOBrpOFOiYCQiSySbEaCWBZwQJ+UyitoOl2oOPozUhn9nDq9pl0yrI5hhVVeVlq7V1o6nCQrRl4a+cCPc+nLpef+cTTSgKsLMxSjhuE7ddXA1Kgd8yUstsd0wUSH9NwtH4TEWe32JSSbCbqwghRipJpx5BFs6uBA2266K1xnZd0G3bs9DdTP/0VkE2xxgXXgzxODoSQWudqqZQsPTSATxdu49XFdEYjhN3XExDoRS42vvL2N3id+mvMRTEHZfGcJyPVxUNyj0JIXJHAs8Ict5xUzn32MkELRPb1QQtk3OPnZz1+E4284OyOaa7sjyh+Z8cwNO1e6ummZKQD79p4Gov8JXl+ThkfAG3nj2ryzGbjq/xmwYlIR9v1TQPyj0JIXJHutpGmPOOm9rvDLZs5gdlO4doKMvy7G6OUZLno1T5U9u01j2O1/TnNUKIkUkCzyAZCevG9DQ/qC/HDLXuarD1VHmgP68RQoxMEngGQTaZYrnS3Uz/vh4zlPpTuWE0VXsQQvRMAs8gGKlzTEZCFYRuW4J9bHWNhJaaEGJwSOAZBCNxjslIqILQW0uwr0FjuFtqQojBIYFnEIzE8YdsqyAM5djUSG0JCiGGl6RTD4JFc6qwXU004aC17nYSZC5FEg6m6rkKQvpKqEOxkmc2c4aEEGOPBJ5B0N26McP5qT7kM3G0ztjWsQpCeotEKe+rZSjWbMquwnRvRtO6Q0KI3JGutkEyXOMP3XWVLZxdya9e+wjbdTGV8oJQhyoI2Y5NJa9R35qgPN+XdXdcx0y0xnCC/TGblpjDdY9tkeQAIcYoafGMYj11lWVTBSGbFkn6NYpCVp+649JbgvUtcZpjNoVBH2X5vkHv1hNCjB7S4hnFehu8760KQjZzY7rqjutLgkCyJXjdY1syEjAk0UCIsUtaPKPYQAfvsxmbGqwEAUk0EEIk5aTF09DQwH/8x3+wfft2/H4/06ZN4+abb2bcuHFs3ryZG264gVgsRlVVFT/84Q8pKysDGJJ9B5LBSOPubWxqsFLFR2LKuRBieCitO6Q+DYHGxkbee+89jj/+eABuv/12mpqaWL58OaeddhorVqygurqae++9lx07drBixQpc1x30fX2xd28Lrtv9j6aiopC6uv0D+rkkpScI5PlNtNZEEm6v82rSJ2gmu8pa4w5FQYtIwkVrl/1Rh7jjdlu5wHlpfZeLuSXvace+COG4TWHAorw4SGskge1qlpx8MEDWc4C6utf+nCfXBvP3PFqMxWeGvj93RUXhEN7NgS0nXW0lJSWpoAMwe/Zsdu7cyZYtWwgEAlRXVwOwePFinn76aYAh2TcSpQ/eGwp27AvzUWMEA93rAHzHrjLLNNBa47iaeMKmriVB1HZRkKpcsHrj9tTrnZfW46xY5i36VlyMrq/HWbGMjX9Yn7qnsnwfQctgXzjB+7X7aQgnmH9YBUCf5gB1163X1/MIIUa/nCcXuK7L6tWrmT9/PrW1tUyaNCm1b9y4cbiuS2Nj45DsKykpyc1D9kH64H1NYwSjbenrpqhNVUmo1wH49K6y6x7bgu24BH0mO5uiACjABfyGkapcMGNCodfC+LCV0ImXgjKIWAHGR5tY+M+XWfvmLqwphxD0mbTGHcIJF8MAv2VSmudj3bt1vPz3vX2uStBVt951j22R6gZCjDE5DzzLli0jLy+PCy64gD/+8Y+5vnzWysoKej1mMJra9a0JikI+lFLYrvYCj9bYrsbymeRbBvWtiayulX6uVC+hAtqWljYNr3LBQy9txWcaGHaCj/LLAUVFvJnGQD4PH/45ophMbDtPU1MUw1AowHZcCvL8ROIOtY0RDqrIR6VVR+jLvXZ1zwM5z1AaKfeRS2PxmWHsPneu5TTw3H777Wzbto37778fwzCorKxk586dqf379u3DMAxKSkqGZF9f5GqMp7xtTkuyaoDddk3LUDS1xtnXEsMFLnnwL72OfaSfy2hbThoNeLEMp+3chtb4FOwOFmK0DfE1WnlURRvRaOygN5YT9JnEbW95aleDzzSwEw4WGq116pikaMKhPN+f8XPprRZc+j33dJ7hMhbHO8biM4OM8eRSzgLPj370I7Zs2cKDDz6I3++tIjlr1iyi0Sivv/461dXV/PKXv+Szn/3skO0bidLn0hSHfOzZH8PVkHA0kaYohoLxBf6Mys7QPhgf8hkopQjHHfL8Ji0xG4CigElj1EEDJmC7LmgIWkYqrdm2fBiJBCiNbZjgugS0gy8YoDXuULc/hu16rS9Twbhi7/cWs91UN2BPc4CyWadI1tkRYuzJSVbbBx98wBlnnMH06dMJBoMATJ48mXvuuYdNmzZx4403ZqQ+l5eXAwzJvmwNR1bbjn2RtsChSRYUMPBSkfMDFtGEl0AQTThe68hxqWuNg4aKwgCWoVJZbdGEi9tFVttbNc2pFkZNYwTbdsB2MF2bqsR+oqXl+AryaQzHiSRcEo6Lq70eu0mlQZSmUzZad+vjdJw0Cl5rpjTfz61nz+r0/CNxnZ2x+Ol/LD4zSIsnl3ISeEajXAaepPQ36q17w21dXBrLUFSVhNBas70hwoTCQHvgSOuaS7ZCOr6xp0tvhdiupm5/DBRU5PuxTAPb1QQsA8fVqYDR2tTC3oiNBg4N7+HsIydy3Onzen2ei1e9QWHAzBi/0VrTEnN4+MJjBv4Dy4Gx+CY8Fp8ZJPDkklQuGEHSZ/f7TC/oKLxuNyBVVy15TMLx9htKpY7prRpAelqz1jBlXB6TS0JoVCrFOZJwU9fQLS3k1dUyubWe0kSYH2xcxex7l+G8tL7X55Hq1EKIrkitthEkfXZ/SZ6fuv0xXDS+tu4129VMKg4Ss72UaZ/ptVq01vhMr1WRzRt7n6oV7K0HpYhZfibEmlGhEBpwV63EPLHnVo+M3wghuiKBZwRZNKeKHz79HhHbRetUJjQFfoPSfH/qDTuVjBC0UmM8xfl+ogmH1riDaSS4eNUbGVlkfVlpND1g+BNx6kIltPhC1ARL+Mqxl7Kg5g3OeTszFX7jH9bz2Ju72GPmMd4Jp7rjPjisgrWba4kknNQ4U8frrt64vdMxuVqee6QYypVghRhpzJtuuumm4b6JkSgSidPT6Fd+foBwOD6o13zx/To2f9SUcV1DwaI5k/j3T89gUkmISSUhWmM2m3c00RS18ZkGpXk+QBFom3zpM41UhttrWxtojdn85o0a4rabsT15vo6S27fuDfNRWNNitR2jDBKGydvFU1CFBRz5qX8FvKDz4JYm4pjk6QQtys9rdXFaanfz/K4E+X6T8gI/PtPgH3WtGdddvXG7t25Q21hWwnX5W00zGs3Hq4oH9efbH0Pxe+4oOe6W7e9nqOXimUeivj53fr50GfeXjPGMIGs316KUN06T/E8pb3vS69saeGrLbmzHK4WD1iRczaWnHExh0KIgYKWWMHA0NLTGWb3xIxpa4ziarFcarZ5Wyq1nz8Lxe/+4FKDwxpRcpfhd1bGpYx97cxeWdgnioFAEcbC0y+M1iV5XOF27uRYUWIaXFm4ZBnR45qTVG7ez+MFXWXjPBhY/+GpG+Z/RbKhXghVipJHAMwK8vq2B6x7bQmvcwXXBcdsH5E3lVRtIWrVhG82RBC5gmQYu0BxJsGrDtozkhOQ8HEdrNN6y13X7Y7TGvXNluyRB1FVe1Emn2ra32WPmEcDOOCSATcTw9boUQiThYKrMC3R8ZmhvGUVtL5W8q9pzo5UsGSH64ytf+QqPPvrocN9Gv/RpjKehoYEXX3yRuro6LrnkEnbv3o3WmokTJw7V/R3w0tObk2M6XiKYi2kYOFoTSpsHU9MYQSkvkw28r1ppahojHDaxMJUU0BiO4x2iMJROpTQ3huPk+0NZZ5d596S8mjvJGyQzFo13wjSoAEHag0UMi5CbSCVCpLZ3uG7IZ3rBJC34dHxmyGwZAVhKpWrPjfbxIFkyYmyYP38+9fX1mGb77/npp59mwoQJAzrv/fffzwMPPACAbdvYtp2aLzlp0iT+8Ic/DOj8QyHrFs/GjRv57Gc/yxNPPMG9994LwLZt25AhooFZs6mGhKPZ25oMFB7Hba82sHB2ZapVlHC8yaVx2yVmu8QdNzUmtGhOFa1xhx37wm2TPzWuqykOWqlj4rZLQzjB7v0xtu8Nc91jW7qsBJ28XvKeNF7ZneTwU3mBL3Xs2UdOxFYGUUw0migmtjI4s8qH7WqiCQetdSozb9GcqtT5k88at1201hnPnC7bltFotGhOVbc/J3Fguf/++/nrX/+a+m+gQQfg0ksvTZ3vBz/4AbNnz059PxKDDvQh8Nx6663cfffdrFy5EsvyGkpHHXUUb7755pDd3FiwY1+ExnAc2/XSpo20N/qgZXLusZOZMaGwfekE2vdDWw02DSUhq+37toqgafuDfouKAr/XSlKK/dEERQGL8rRSPOnBJ32phvGFgYzWjVKQ5zO47JP/ktp23Onz+MasYkp1jBYjQKmO8Y1ZxZx/zrxel0KYWBSgKOB9Aow7OvXMHVsxIZ+J0yHbo6uW0WiUzUqw4sA0f/58NmzYkPr+pz/9KVdddVXq+82bN7N48WKqq6s588wzefXVV7M+98MPP8y3vvWtjG3Lly9n+fLlgNdVd9ddd/HFL36ROXPmsHTpUhobGwfl2r3JuqutpqaGE044ASDVbePz+XCc0f+Js78GIwU24biQ1nXmM73lC4KWyVWnzWTNphoefaMGQynG5fmwTIO40z4GlAwK+QEfazbVUBCwKC8waY3Z1LXE0WgaWmOUFwQozfMR9JmppROg62UI0ge7AVSxYl9LDK0Uh04o6PI5jzt9Hsed3vn5slkKYXxRkKJeKi4snF3pZb+5LqZSXhDqomU0WvU2t0qMPbt372bJkiXccccdzJs3j7/85S9cfvnlPPXUU4wbN67X15955pn813/9F83NzRQVFWHbNn/4wx946KGHUsf87ne/Y+XKlUyePJlrrrmG5cuXc+eddw742r3JusVzyCGHsH595mz1DRs2MHPmzAHfxGi04f26QVnAzBvb8aoUaK3bqhUotNap87uut72uJY7tuFhGexsk6DOYUBQgEncyBqnzA14rx2caxB2d+hQdjju9DmR3HOzO95tMLg1RVhDg1rNnDfgNsj+D6ecdN5Vzj51M0DKx3e5bRkKMZN/85jeprq6murqayy67rMdj165dy0knncTJJ5+MYRh84hOfYNasWbz44otZXWv8+PFUV1enFsJcv349paWlzJrV/uFu4cKFzJw5k7y8PK644gqefvppHMcZ8LV7k3WL57vf/S5LlizhlFNOIRqNcsMNN7Bu3brUeM9Y8/MNWwdlAbOpZXnsbIgQTjgkHK8CQZ7PJGq7qfP7La+GmvJymlHKK6nTsT4bkDFInR+wMA2V0ZLIZiC7u2Mmleb1++eVrr+D6ecdN1UCjRjV7rnnHubOnZv6fv78+d0eu3PnTp5++mmef/751DbbtjNWc+7N2WefzerVq/nSl77E448/zsKFCzP2V1a29xhMmjSJRCJBQ0PDoFy7J1kHntmzZ/P444/z+OOP84UvfIHKykp+85vfjNmMtp0NEfIGIQU2WSWgzG9mlJVJFusEUuVzkiM7blu56OKgr9NAdG8lajqWsWmM2DRHE+yP2lz32BYWzanqfExjK81xh/276rj2zbdSVQkSD9yH/tkjEA5DXh7qgovwLVnaaxfkojlV/Pipt9kTs3FQmGjyAhYXzzuo089HZvSLA1koFCISiaS+r6urS/25srKShQsXpsZk+uPTn/40N910E++//z4vvPACV199dcb+2trajD/7fD5KS0sH5do9ybqrLR6PM27cOC655BJuvPFGvvGNb1BWVkY8PvZmOANMKg0NSgHM7gaWp5blpc6f7zepKAxgKoVpqC4LeybHCHobpE4/Zm9rostEA6D9mMZWmqM2hbFWymwvbfrBLU288oM70Q/eC5EIWBZEIugH7+XVe3/Waxeku2ULuqUFdFsrTmt0Swvuli0ZP5v0JIeBdGcKMVIddthhPPnkkyQSCd566y2eeeaZ1L4zzzyT559/nvXr1+M4DrFYjFdffZVdu3Zlff5AIMBpp53GlVdeycc//nEmTZqUsf/xxx/n73//O5FIhB//+MecdtppmKY5KNfuSdYtnq997WtcffXVzJ49O7Xtb3/7G3fddRf/+7//Oyg3M5p8ee50lj32VmqxNMtQbZ/a+54C293A8k/+9PdO57/8U//S4yf+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V3PLLbfQ1tY2wb0dfR599FFOPfVU3n//fWB6jzkSibB582YuvfRSrrzySu69915gen/OX3rpJa6++mquuuoq1q5dywsvvABM7zFPOqRiWNx4442yoaFBSillQ0ODvPHGGye4R6NPR0eH/MMf/pD897/8y7/Ie+65R1qWJS+55BL55ptvSimlfOyxx+Tdd989Ud0cE/bu3Ss3btwoL7roIrlv375pP+YHH3xQfuMb35C2bUsppTx+/LiUcvp+zm3blvX19XLfvn1SSinfffddedZZZ0nLsqbtmCcjasUzDNra2njnnXdYs2YNAGvWrOGdd95JrgamC8XFxZx77rnJf5911lk0NTWxd+9ePB4P9fX1AFx//fX8+te/nqhujjrRaJQHHniA+++/P3lsOo+5t7eXhoYGvvKVryCEkxyzvLx82n/ONU2jp6cHgJ6eHiorK+no6JjWY55sqOzUw+Do0aNUVVWh6zoAuq5TWVnJ0aNHKS0tneDejQ22bfOzn/2MlStXcvToUWbPnp08V1paim3bdHZ2UlxcPIG9HB3+7d/+jbVr1zJnzpzksek85iNHjlBcXMyjjz7KG2+8QV5eHl/5ylfwer3T9nMuhOC73/0uX/rSl/D7/fT29vLDH/5wRv5tTyRqxaPIyYMPPojf7+ezn/3sRHdlTHnrrbfYu3cv69evn+iujBuWZXHkyBGWLFnC1q1bueuuu7jtttsIBoMT3bUxwzRNfvCDH/D973+fl156iccff5w77rhjWo95MqJWPMOgurqa5uZmLMtC13Usy6KlpYXq6uqJ7tqYsGXLFg4fPswTTzyBpmlUV1fT1NSUPN/e3o6maVP+mz/Am2++yf79+7n44osBOHbsGBs3buTGG2+ctmOurq7GMIzk9tKZZ55JSUkJXq932n7O3333XVpaWli+fDkAy5cvx+fz4fF4pu2YJyNqxTMMysrKWLx4Mdu3bwdg+/btLF68eFouxb/97W+zd+9eHnvsMdxuNwBLly4lHA6za9cuAH7+859z2WWXTWQ3R43Pfe5zvPrqq7z44ou8+OKLzJo1i6eeeopbb7112o65tLSUc889l9deew1wVF1tbW3Mnz9/2n7OZ82axbFjxzhw4AAA+/fvp62tjdra2mk75smIKgQ3TPbv38/dd99Nd3c3hYWFbNmyhQULFkx0t0aVDz74gDVr1jB//ny8Xi8Ac+bM4bHHHmP37t1s3ryZSCRCTU0NDz/8MOXl5RPc49Fn5cqVPPHEEyxatGhaj/nIkSN87Wtfo7OzE8MwuOOOO7jgggum9ef8l7/8JU8++WRSUHH77bdzySWXTOsxTzaU4VEoFArFuKK22hQKhUIxrijDo1AoFIpxRRkehUKhUIwryvAoFAqFYlxRhkehUCgU44oyPAqFQqEYV5ThUcx4brzxRs4++2yi0ehEd0WhmBEow6OY0Xz88cfs2rULIQS/+93vJro7CsWMQBkexYymoaGBM888k2uuuYaGhobk8Y6ODr7whS9QV1fHtddey3e+8x0+85nPJM/v37+fm2++mXPOOYfVq1ezY8eOiei+QjElUUlCFTOabdu2sWHDBs4880yuu+46WltbKS8v54EHHsDn8/Haa6/R2NjIxo0bk+URgsEgt9xyC7fffjtPPvkk77//PjfffDOLFi1i4cKFEzwihWLyo1Y8ihnLrl27aGpq4vLLL2fp0qXMnTuX7du3Y1kWL7zwArfddhs+n4+FCxdy9dVXJ+/7/e9/T01NDddeey2GYbBkyRJWr149bQrEKRRjjVrxKGYsDQ0NnHfeeckMxGvWrOHZZ5/liiuuwDTNtJT4qb83NjayZ8+eZFVScGrbrF27dvw6r1BMYZThUcxIwuEwv/rVr7Btm/POOw9wSl93d3fT1taGYRgcO3aMk046CXAqkSaorq7m7LPP5umnn56QvisUUx211aaYkfz2t79F13Wef/55GhoaaGhoYMeOHdTX19PQ0MCqVat49NFHCYVC7N+/n23btiXvvfDCCzl06BANDQ3EYjFisRh79uxh//79EzgihWLqoAyPYkby7LPPsm7dOmbPnk1FRUXyvxtuuIHnnnuO++67j56eHs477zy++tWvcsUVVyQL4uXn5/PUU0+xY8cOVqxYwfnnn88jjzyi4oAUiiGi6vEoFEPg4YcfprW1lS1btkx0VxSKKY9a8SgUGdi/fz/vvfceUkr27NnDf/7nf7Jq1aqJ7pZCMS1Q4gKFIgO9vb3ceeedtLS0UFZWxi233MLFF1880d1SKKYFaqtNoVAoFOOK2mpTKBQKxbiiDI9CoVAoxhVleBQKhUIxrijDo1AoFIpxRRkehUKhUIwryvAoFAqFYlz5/4MPZJBrDkVfAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(cars_data['Age'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "gsfgnc74wvPm",
        "outputId": "b0576eef-8e98-4930-e36d-e7a33facd3c5"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e905d90>"
            ]
          },
          "metadata": {},
          "execution_count": 114
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram without kernel density estimate\n",
        "sns.distplot(cars_data['Age'],kde=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "Y_qRZUsxw08F",
        "outputId": "a2cbade2-f8c0-4e6b-9365-8411dbe13ef3"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa7118c790>"
            ]
          },
          "metadata": {},
          "execution_count": 115
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Histogram with fixed no. of bins\n",
        "sns.distplot(cars_data['Age'],kde=False, bins=5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "82UGQ9ZPw55T",
        "outputId": "e1825730-dec3-4657-d157-cbcfed0fd569"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e8121d0>"
            ]
          },
          "metadata": {},
          "execution_count": 116
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"FuelType\", data=cars_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "98SacGtuw-18",
        "outputId": "b76ef3f3-c11a-4ff4-9044-fe87bc3f4eb4"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e72f290>"
            ]
          },
          "metadata": {},
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###Grouped bar plot\n",
        "#Grouped bar plot of FuelType and Automatic\n",
        "\n",
        "sns.countplot(x=\"FuelType\", data=cars_data, hue=\"Automatic\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "kmJcC7JrxDri",
        "outputId": "3d230021-8359-4f72-f930-33dc92f49f7f"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e702750>"
            ]
          },
          "metadata": {},
          "execution_count": 118
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(index=cars_data['Automatic'], columns=cars_data['FuelType'],dropna=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "C5tSscLvxIwk",
        "outputId": "d271a6c3-66ae-442c-d040-f6585bfba71f"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FuelType   CNG  Diesel  Petrol\n",
              "Automatic                     \n",
              "0           15     144    1104\n",
              "1            0       0      73"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a7d5684-fee4-43ef-8de0-71baa6759a26\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>FuelType</th>\n",
              "      <th>CNG</th>\n",
              "      <th>Diesel</th>\n",
              "      <th>Petrol</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Automatic</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15</td>\n",
              "      <td>144</td>\n",
              "      <td>1104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a7d5684-fee4-43ef-8de0-71baa6759a26')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a7d5684-fee4-43ef-8de0-71baa6759a26 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a7d5684-fee4-43ef-8de0-71baa6759a26');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=cars_data['FuelType'],y=cars_data[\"Price\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "GwsqdX8BxN1J",
        "outputId": "5cd9689d-4a42-492c-ddf9-0c0c2d309dc9"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e67c390>"
            ]
          },
          "metadata": {},
          "execution_count": 120
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f,(ax_box,ax_hist)=plt.subplots(2,gridspec_kw={\"height_ratios\": (.15, .85)})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "IqrZHRyqxSoF",
        "outputId": "6353c5c7-e0cb-4e75-a1ec-0ca99d6df245"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f,(ax_box,ax_hist)=plt.subplots(2,gridspec_kw={\"height_ratios\": (.15, .85)})\n",
        "sns.boxplot(cars_data['Price'],ax=ax_box)\n",
        "sns.distplot(cars_data['Price'],ax=ax_hist,kde=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "id": "gUTA_Fclxcl9",
        "outputId": "85295b19-8d20-4544-ede3-d2ff01c7770e"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa6e4ff590>"
            ]
          },
          "metadata": {},
          "execution_count": 122
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(cars_data,kind=\"scatter\",hue=\"FuelType\",diag_kws={'bw': 0.1})\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ojkbn09ZxiJo",
        "outputId": "ad21b734-d6b1-40fe-f419-68d9bee587f8"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:1699: FutureWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`. Using 0.1 for `bw_method`, but please see the docs for the new parameters and update your code.\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1153.85x1080 with 42 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import os"
      ],
      "metadata": {
        "id": "rJEfbtUoxtGH"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data=np.random.randint(1,100,size=(10,10))\n",
        "print(\"The data to be plotted: \\n\")\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-NTBwYjJxyyp",
        "outputId": "3cc7bae9-3aa9-4153-aa9a-c93625bf499d"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The data to be plotted: \n",
            "\n",
            "[[24 31 44 42 27 17 17  9 82 29]\n",
            " [78 59  4 31 63 43 62 40 44 56]\n",
            " [80 31 17 46 50 39 40 33  2 64]\n",
            " [94 46 13 26 98 92 21 59 38 73]\n",
            " [15 18 33 49  1 43 12 16 37 34]\n",
            " [15 95 77 23 90  2 21  7 25 10]\n",
            " [ 4 93 65 18 77 85 81 94 67 82]\n",
            " [67 79 10 18 56 33 51 85 77 26]\n",
            " [49  4 87 58 94 77 57 32 39 53]\n",
            " [80 15 65 14 87  3 70 14 76  6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting Heatmap\n",
        "hm=sns.heatmap(data=data)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "Dt2LIhBKx2rf",
        "outputId": "f2135bbd-b37b-46a0-d9af-f59df8a41b2e"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hm = sns.heatmap(data=data,\n",
        "                vmin='30',\n",
        "                vmax='70')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "Tx9ZVU0Vx7GJ",
        "outputId": "cd28b3c3-bf59-4b27-ca47-a59131e8c2a6"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# setting the parameter values\n",
        "cmap = \"tab20\"\n",
        "center = 0  \n",
        "\n",
        "# setting the parameter values\n",
        "annot = True\n",
        "\n",
        "# plotting the heatmap\n",
        "hm = sns.heatmap(data=data, cmap=cmap, annot=annot)\n",
        "\n",
        "\n",
        "  \n",
        "# displaying the plotted heatmap\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "igg4gYh9yBw5",
        "outputId": "1018b988-e767-4138-b7f5-e4a6ee1293fd"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "pratical **4**"
      ],
      "metadata": {
        "id": "duz-RpwOyLEl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data=pd.read_csv('Toyota.csv',index_col=0)\n",
        "cars_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r2-LcHYCwBZG",
        "outputId": "dbbeabda-429a-4a66-cbd3-e85ea80ea5ee"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Price   Age     KM FuelType  HP  MetColor  Automatic    CC  Doors  Weight\n",
              "0  13500  23.0  46986   Diesel  90       1.0          0  2000  three    1165\n",
              "1  13750  23.0  72937   Diesel  90       1.0          0  2000      3    1165\n",
              "2  13950  24.0  41711   Diesel  90       NaN          0  2000      3    1165\n",
              "3  14950  26.0  48000   Diesel  90       0.0          0  2000      3    1165\n",
              "4  13750  30.0  38500   Diesel  90       0.0          0  2000      3    1170"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16f730cf-6ab6-4e35-abb1-074a1b4d5604\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>KM</th>\n",
              "      <th>FuelType</th>\n",
              "      <th>HP</th>\n",
              "      <th>MetColor</th>\n",
              "      <th>Automatic</th>\n",
              "      <th>CC</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>13500</td>\n",
              "      <td>23.0</td>\n",
              "      <td>46986</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>three</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13750</td>\n",
              "      <td>23.0</td>\n",
              "      <td>72937</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>13950</td>\n",
              "      <td>24.0</td>\n",
              "      <td>41711</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14950</td>\n",
              "      <td>26.0</td>\n",
              "      <td>48000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>13750</td>\n",
              "      <td>30.0</td>\n",
              "      <td>38500</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>90</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>1170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16f730cf-6ab6-4e35-abb1-074a1b4d5604')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-16f730cf-6ab6-4e35-abb1-074a1b4d5604 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-16f730cf-6ab6-4e35-abb1-074a1b4d5604');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# probability of getting 3 when a die is rolled\n",
        "ns = 6 #n(S) = {1,2,3,4,5,6}\n",
        "na = 1 #n(A) = {3}\n",
        "pa = na/ns # P(A)\n",
        "print(\"probability of getting 3 is:\",pa)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cWzUNVQMyXZy",
        "outputId": "ecfb6d35-06f1-44f2-8d22-347fda33e5a5"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of getting 3 is: 0.16666666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# probability of atleast getting one head when a coin is tossed thrice\n",
        "ns = 8 #n(S) = {HHH, HHT, HTH, THH, TTH, THT, HTT, TTT}\n",
        "na = 7 #n(A) = {HHH, HHT, HTH, THH, TTH, THT, HTT}\n",
        "pa = na/ns # P(A)\n",
        "print(\"probability of getting atleast one head is:\",pa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z-RJD1XByndl",
        "outputId": "566c344b-7db8-40c3-9baf-fce54ea9171d"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of getting atleast one head is: 0.875\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A glass jar contains 5 red, 3 blue and 2 green jelly beans. If a jelly bean is chosen at random from the jar, \n",
        "#  mwhat is the probability that it is not blue?\n",
        "ns = 10 #n(S) = {5red,3blue,2green}\n",
        "na = 7 #n(A) = {5red, 2green}\n",
        "pa = na/ns # P(A)\n",
        "print(\"probability of getting not blue jellybean is:\",pa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z6LzhPXXysLd",
        "outputId": "89a3e84b-13eb-4324-eaff-23bba3dc8f16"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of getting not blue jellybean is: 0.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# If the probability that person A will be alive in 20 years\n",
        "#is 0.7 and the probability that person B will be alive in\n",
        "# 20 years is 0.5, what is the probability that they will \n",
        "#both be alive in 20 years?\n",
        "\n",
        "#These are independent events, so\n",
        "P = 0.7*0.5\n",
        "print(\"probability that they will be alive after 20 years is:\",P)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w7jNpHFvyy51",
        "outputId": "46526a21-506c-4684-fb28-ec084c556aaf"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability that they will be alive after 20 years is: 0.35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def event_probability(n,s):\n",
        "  return n/s"
      ],
      "metadata": {
        "id": "3UnMguDCy5Di"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#A fair die is tossed twice. Find the probability of getting a 4 or 5 on the first toss and a 1,2, or 3 in the second toss.\n",
        "pa = event_probability(2,6) # probability of getting a 4 or 5 on the first toss\n",
        "pb = event_probability(3,6) # probability of getting 1,2,3 in second toss\n",
        "P = pa*pb \n",
        "print(\"probability of getting a 4 or 5 on the first toss and a 1,2, or 3 in the second toss is:\",P)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YKeOf8dGy9HT",
        "outputId": "ae6a358b-dabb-469c-ed9e-1a988d0551d3"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of getting a 4 or 5 on the first toss and a 1,2, or 3 in the second toss is: 0.16666666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# A bag contains 5 white marbles, 3 black marbles and 2 green marbles. In each draw, a marble is drawn from the bag\n",
        "# and not replaced. In three draws, find the probability of obtaining white, black and green in that order.\n",
        "pw = event_probability(5,10)\n",
        "pb = event_probability(3,9)\n",
        "pg = event_probability(2,8)\n",
        "print(\"the probability of obtaining white, black and green in that order is \",(pw*pb*pg))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-fdty2LUzCW2",
        "outputId": "95313fe0-86b0-41ae-973d-4d6e45f4a379"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the probability of obtaining white, black and green in that order is  0.041666666666666664\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sample Space\n",
        "cards = 52\n",
        "\n",
        "# Calculate the probability of drawing a heart or a club\n",
        "hearts = 13\n",
        "clubs = 13\n",
        "heart_or_club = event_probability(hearts, cards) + event_probability(clubs, cards)\n",
        "print(heart_or_club )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0MqLGq_zHxu",
        "outputId": "3fddc2a6-664e-436c-91c6-846af52ec30d"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the probability of drawing an ace, king, or a queen\n",
        "aces = 4\n",
        "kings = 4\n",
        "queens = 4\n",
        "ace_king_or_queen = event_probability(aces, cards) + event_probability(kings, cards) + event_probability(queens, cards)\n",
        "\n",
        "print(heart_or_club)\n",
        "print(ace_king_or_queen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r3q5NAE6zNMl",
        "outputId": "aac9c1da-b58c-449d-b809-e1b9bb449092"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5\n",
            "0.23076923076923078\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the probability of drawing a heart or an ace\n",
        "hearts = 13\n",
        "aces = 4\n",
        "ace_of_hearts = 1\n",
        "heart_or_ace = event_probability(hearts, cards) + event_probability(aces, cards) - event_probability(ace_of_hearts, cards)\n",
        "print(round(heart_or_ace, 1))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fJUrqUJezSNM",
        "outputId": "a3dd0056-dc2a-4b38-b440-8b47729b96d9"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "red_cards = 26\n",
        "face_cards = 12\n",
        "red_face_cards = 6\n",
        "red_or_face_cards = event_probability(red_cards, cards) + event_probability(face_cards, cards) - event_probability(red_face_cards, cards)\n",
        "\n",
        "print(round(heart_or_ace, 1))\n",
        "print(round(red_or_face_cards, 1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_P2KNXOQzXnt",
        "outputId": "a13e3c25-0ff4-44bd-9b3f-7123c6265fdb"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.3\n",
            "0.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#probabiltiy of not getting 5 when a fair die is rolled\n",
        "ns = 6 #n(S) = {1,2,3,4,5,6}\n",
        "na = 1 #n(A) = {5}\n",
        "pa = na/ns # P(A)\n",
        "print(\"probabilty of not getting 5 is:\",1-pa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dAjuhzLKzc7U",
        "outputId": "6c26fbf4-433a-433e-a693-a3c48d25d226"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probabilty of not getting 5 is: 0.8333333333333334\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "df = pd.read_csv('student-mat.csv')\n",
        "df.head(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "djtfq3clzjKi",
        "outputId": "c7d6e27e-5141-45eb-c42c-d9b3c8e6f117"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob     Fjob  ...  \\\n",
              "0     GP   F   18       U     GT3       A     4     4  at_home  teacher  ...   \n",
              "1     GP   F   17       U     GT3       T     1     1  at_home    other  ...   \n",
              "2     GP   F   15       U     LE3       T     1     1  at_home    other  ...   \n",
              "\n",
              "  famrel freetime  goout  Dalc  Walc health absences G1 G2  G3  \n",
              "0      4        3      4     1     1      3        6  5  6   6  \n",
              "1      5        3      3     1     1      3        4  5  5   6  \n",
              "2      4        3      2     2     3      3       10  7  8  10  \n",
              "\n",
              "[3 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e1c824aa-229b-4dc3-9066-ead6750601a8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>school</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>address</th>\n",
              "      <th>famsize</th>\n",
              "      <th>Pstatus</th>\n",
              "      <th>Medu</th>\n",
              "      <th>Fedu</th>\n",
              "      <th>Mjob</th>\n",
              "      <th>Fjob</th>\n",
              "      <th>...</th>\n",
              "      <th>famrel</th>\n",
              "      <th>freetime</th>\n",
              "      <th>goout</th>\n",
              "      <th>Dalc</th>\n",
              "      <th>Walc</th>\n",
              "      <th>health</th>\n",
              "      <th>absences</th>\n",
              "      <th>G1</th>\n",
              "      <th>G2</th>\n",
              "      <th>G3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>18</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>A</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>at_home</td>\n",
              "      <td>teacher</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>17</td>\n",
              "      <td>U</td>\n",
              "      <td>GT3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GP</td>\n",
              "      <td>F</td>\n",
              "      <td>15</td>\n",
              "      <td>U</td>\n",
              "      <td>LE3</td>\n",
              "      <td>T</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>at_home</td>\n",
              "      <td>other</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3 rows × 33 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1c824aa-229b-4dc3-9066-ead6750601a8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e1c824aa-229b-4dc3-9066-ead6750601a8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e1c824aa-229b-4dc3-9066-ead6750601a8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['grade_A'] = np.where(df['G3']*5 >= 80, 1, 0)"
      ],
      "metadata": {
        "id": "U-jnxgMAzrU3"
      },
      "execution_count": 142,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['high_absenses'] = np.where(df['absences'] >= 10, 1, 0)"
      ],
      "metadata": {
        "id": "hUNWyXqAzxBM"
      },
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['count'] = 1"
      ],
      "metadata": {
        "id": "6B4FHo_pz2yO"
      },
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[['grade_A','high_absenses','count']]\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Qq3f01rRz_CR",
        "outputId": "45969bfa-99f9-4968-d637-7a72c4112637"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   grade_A  high_absenses  count\n",
              "0        0              0      1\n",
              "1        0              0      1\n",
              "2        0              1      1\n",
              "3        0              0      1\n",
              "4        0              0      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c720cba6-80d1-468c-a754-c7167c10f6c5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>grade_A</th>\n",
              "      <th>high_absenses</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c720cba6-80d1-468c-a754-c7167c10f6c5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c720cba6-80d1-468c-a754-c7167c10f6c5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c720cba6-80d1-468c-a754-c7167c10f6c5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "final= pd.pivot_table(\n",
        "    df, \n",
        "    values='count', \n",
        "    index=['grade_A'], \n",
        "    columns=['high_absenses'], \n",
        "    aggfunc=np.size, \n",
        "    fill_value=0\n",
        ")"
      ],
      "metadata": {
        "id": "J63I47qt0Dnj"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(final)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EoSjnLjX0IUi",
        "outputId": "2e84f570-44f9-4e05-8d90-e1a7e9dcf4a4"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "high_absenses    0   1\n",
            "grade_A               \n",
            "0              277  78\n",
            "1               35   5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dW98W6X80MTk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**pratical 5**\n"
      ],
      "metadata": {
        "id": "yw4yM2PF0QLH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# for inline plots in jupyter\n",
        "%matplotlib inline\n",
        "# import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "# for latex equations\n",
        "from IPython.display import Math, Latex\n",
        "# for displaying images\n",
        "from IPython.core.display import Image\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "DlqSCYlp0XA6"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import seaborn\n",
        "import seaborn as sns\n",
        "# settings for seaborn plotting style\n",
        "sns.set(color_codes=True)\n",
        "# settings for seaborn plot sizes\n",
        "sns.set(rc={'figure.figsize':(5,5)})"
      ],
      "metadata": {
        "id": "ECjugthD0lMB"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import bernoulli\n",
        "data_bern = bernoulli.rvs(size=10000,p=0.6)"
      ],
      "metadata": {
        "id": "R6_i6IzH0pE8"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax= sns.distplot(data_bern,\n",
        "                 kde=False,\n",
        "                 color=\"skyblue\",\n",
        "                 hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Bernoulli Distribution', ylabel='Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "I1RjORN00uvT",
        "outputId": "4ba4c618-a42b-4077-929c-0e63daacfb03"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Bernoulli Distribution')]"
            ]
          },
          "metadata": {},
          "execution_count": 151
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import binom\n",
        "data_binom = binom.rvs(n=10,p=0.8,size=10000)\n"
      ],
      "metadata": {
        "id": "jOadNePs0zEj"
      },
      "execution_count": 152,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.distplot(data_binom,\n",
        "                  kde=False,\n",
        "                  color='skyblue',\n",
        "                  hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Binomial Distribution', ylabel='Frequency')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "bI4VCNr804q5",
        "outputId": "e56133b3-730d-4035-b614-741c25bf6fe1"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Binomial Distribution')]"
            ]
          },
          "metadata": {},
          "execution_count": 153
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import poisson\n",
        "data_poisson = poisson.rvs(mu=3, size=10000)"
      ],
      "metadata": {
        "id": "bLQ0Odbx0-n2"
      },
      "execution_count": 154,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.distplot(data_poisson,\n",
        "                  bins=30,\n",
        "                  kde=False,\n",
        "                  color='skyblue',\n",
        "                  hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Poisson Distribution', ylabel='Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "sIT7XW_W1Ea9",
        "outputId": "37681868-9104-4a6f-edce-274d179751a1"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Poisson Distribution')]"
            ]
          },
          "metadata": {},
          "execution_count": 155
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GrJJDu3I1M9_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "pratical **6**"
      ],
      "metadata": {
        "id": "E058p5gq1NfB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# for inline plots in jupyter\n",
        "%matplotlib inline\n",
        "# import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "# for latex equations\n",
        "from IPython.display import Math, Latex\n",
        "# for displaying images\n",
        "from IPython.core.display import Image\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "OojOBJnD1Rf4"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import seaborn\n",
        "import seaborn as sns\n",
        "# settings for seaborn plotting style\n",
        "sns.set(color_codes=True)\n",
        "# settings for seaborn plot sizes\n",
        "sns.set(rc={'figure.figsize':(5,5)})"
      ],
      "metadata": {
        "id": "gj4s-LOl1cl_"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import uniform distribution\n",
        "from scipy.stats import uniform"
      ],
      "metadata": {
        "id": "S17Yehrw1g7z"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# random numbers from uniform distribution\n",
        "n = 10000\n",
        "start = 10\n",
        "width = 20\n",
        "data_uniform = uniform.rvs(size=n, loc = start, scale=width)"
      ],
      "metadata": {
        "id": "FEf6UT_G1mSS"
      },
      "execution_count": 159,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.distplot(data_uniform,\n",
        "                  bins=100,\n",
        "                  kde=True,\n",
        "                  color='skyblue',\n",
        "                  hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Uniform Distribution ', ylabel='Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "FDVPJ9JB1qmS",
        "outputId": "a0563c4b-f701-4c5f-d27c-724cb21df04b"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Uniform Distribution ')]"
            ]
          },
          "metadata": {},
          "execution_count": 160
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import norm\n",
        "# generate random numbers from N(0,1)\n",
        "data_normal = norm.rvs(size=10000,loc=0,scale=1)"
      ],
      "metadata": {
        "id": "1SGFZTXN1vcL"
      },
      "execution_count": 161,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.distplot(data_normal,\n",
        "                  bins=100,\n",
        "                  kde=True,\n",
        "                  color='skyblue',\n",
        "                  hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Normal Distribution', ylabel='Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "TK7s_d_-11IM",
        "outputId": "c7e05b37-5d39-4b5b-dde4-d43df0a6927b"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Normal Distribution')]"
            ]
          },
          "metadata": {},
          "execution_count": 162
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import expon\n",
        "data_expon = expon.rvs(scale=1,loc=0,size=1000)"
      ],
      "metadata": {
        "id": "nXsRaLXD16BL"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.distplot(data_expon,\n",
        "                  kde=True,\n",
        "                  bins=100,\n",
        "                  color='skyblue',\n",
        "                  hist_kws={\"linewidth\": 15,'alpha':1})\n",
        "ax.set(xlabel='Exponential Distribution', ylabel='Frequency')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "VHfyIcDP1_uw",
        "outputId": "b52075f0-8980-4f87-cf54-3230d24cb0ab"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0.5, 'Frequency'), Text(0.5, 0, 'Exponential Distribution')]"
            ]
          },
          "metadata": {},
          "execution_count": 164
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import random\n",
        "\n",
        "x = random.chisquare(df=2, size=(2, 3))\n",
        "\n",
        "print(x) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xngc_z6i2Enw",
        "outputId": "d894057a-bfc0-4635-dabe-c601d7c1579a"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1.50632833 3.63453884 3.89752327]\n",
            " [1.47280447 2.57198015 1.15830684]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import random\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "sns.distplot(random.chisquare(df=1, size=1000), hist=False)\n",
        "\n",
        "plt.show() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "id": "q3HdapCA2P3z",
        "outputId": "a4276457-5b9f-42c7-bfdb-e28ed467caaa"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 5. # shape\n",
        "\n",
        "s = np.random.weibull(a, 1000)"
      ],
      "metadata": {
        "id": "yOLmbAkE2UaW"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Display the histogram of the samples, along with the probability density function:\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = np.arange(1,100.)/50.\n",
        "\n",
        "def weib(x,n,a):\n",
        "\n",
        "    return (a / n) * (x / n)**(a - 1) * np.exp(-(x / n)**a)"
      ],
      "metadata": {
        "id": "IJvM6dnh2abj"
      },
      "execution_count": 168,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "count, bins, ignored = plt.hist(np.random.weibull(5.,1000))\n",
        "\n",
        "x = np.arange(1,100.)/50.\n",
        "\n",
        "scale = count.max()/weib(x, 1., 5.).max()\n",
        "\n",
        "plt.plot(x, weib(x, 1., 5.)*scale)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "K-huKHFP2e3e",
        "outputId": "8d4ee746-6ac4-44fc-e4b9-ef246a6193dc"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "J_60OR5D2my4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "pratical **7**"
      ],
      "metadata": {
        "id": "uY21BF6I2paa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "bdRTFnCI2xtk"
      },
      "execution_count": 170,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "oyBePsRm2sya",
        "outputId": "4bd03630-05b4-4e57-e463-98b9d2b5dbcd"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     grade_A  high_absenses  count\n",
              "0          0              0      1\n",
              "1          0              0      1\n",
              "2          0              1      1\n",
              "3          0              0      1\n",
              "4          0              0      1\n",
              "..       ...            ...    ...\n",
              "390        0              1      1\n",
              "391        1              0      1\n",
              "392        0              0      1\n",
              "393        0              0      1\n",
              "394        0              0      1\n",
              "\n",
              "[395 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6dc99b12-8ac8-4ee5-88d4-fdb0d6e5099b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>grade_A</th>\n",
              "      <th>high_absenses</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>390</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>392</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>393</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>395 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dc99b12-8ac8-4ee5-88d4-fdb0d6e5099b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6dc99b12-8ac8-4ee5-88d4-fdb0d6e5099b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6dc99b12-8ac8-4ee5-88d4-fdb0d6e5099b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "skew1=df.skew(axis=0, skipna=True)\n",
        "skew1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GSb3B2Sc4O44",
        "outputId": "f7ec070c-d1ba-4682-c7f2-8a243d7e51e3"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "grade_A          2.653509\n",
              "high_absenses    1.428477\n",
              "count            0.000000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The skewness is positive so x will have right side tail."
      ],
      "metadata": {
        "id": "s8oOM6xW4UPQ"
      },
      "execution_count": 185,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "kZl4G-w54Yte",
        "outputId": "0a30fdac-f386-4663-b680-f43faca1fc1b"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          grade_A  high_absenses  count\n",
              "count  395.000000     395.000000  395.0\n",
              "mean     0.101266       0.210127    1.0\n",
              "std      0.302063       0.407915    0.0\n",
              "min      0.000000       0.000000    1.0\n",
              "25%      0.000000       0.000000    1.0\n",
              "50%      0.000000       0.000000    1.0\n",
              "75%      0.000000       0.000000    1.0\n",
              "max      1.000000       1.000000    1.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c68b63b-deb2-4c65-9417-3d02edbaecea\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>grade_A</th>\n",
              "      <th>high_absenses</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>395.000000</td>\n",
              "      <td>395.000000</td>\n",
              "      <td>395.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.101266</td>\n",
              "      <td>0.210127</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.302063</td>\n",
              "      <td>0.407915</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c68b63b-deb2-4c65-9417-3d02edbaecea')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2c68b63b-deb2-4c65-9417-3d02edbaecea button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2c68b63b-deb2-4c65-9417-3d02edbaecea');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8RuO9DnR4cz3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "pratical 8"
      ],
      "metadata": {
        "id": "sCKgtsXh4k4E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import ttest_1samp\n",
        "from statsmodels.stats.power import tt_ind_solve_power"
      ],
      "metadata": {
        "id": "7wEhIXX84ohA"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ages=[10,20,35,50,28,40,55,18,16,55,30,25,43,18,30,28,14,24,16,17,32,35,26,27,65,18,43,23,21,20,19,70]"
      ],
      "metadata": {
        "id": "JYN7ijg34vtz"
      },
      "execution_count": 188,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ages_mean=np.mean(ages)\n",
        "print(ages_mean)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vSYrtL084zwx",
        "outputId": "12370170-5912-48a0-a6c7-24cb5377b2ce"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30.34375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lets take sample\n",
        "sample_size=10\n",
        "age_sample=np.random.choice(ages,sample_size)\n",
        "age_sample"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rh-dMTi444pB",
        "outputId": "4628ab4f-e742-4ec2-8ded-99aa99961380"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([27, 65, 43, 27, 19, 24, 16, 28, 40, 35])"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import ttest_1samp"
      ],
      "metadata": {
        "id": "pDPEY_eq481K"
      },
      "execution_count": 191,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ttest,p_value=ttest_1samp(age_sample,30)"
      ],
      "metadata": {
        "id": "2l7sIUwt5OL2"
      },
      "execution_count": 192,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(p_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2tKjnUg05S-q",
        "outputId": "efb623b9-2a6b-47b5-dd15-30ec313b9679"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.6080644789494127\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if p_value < 0.05:\n",
        "    print(\"We are rejecting null hypothesis\")\n",
        "else:\n",
        "    print(\"We are accepting null hypothesis\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BhHQb7c05ZzG",
        "outputId": "e910dc38-25f0-4a08-bdc2-86d6029cd596"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We are accepting null hypothesis\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wmS_bUBR5dCr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}